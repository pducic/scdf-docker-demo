{
  "groups": [
    {
      "name": "encrypt",
      "type": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties"
    },
    {
      "name": "encrypt.key-store",
      "type": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "sourceMethod": "getKeyStore()"
    },
    {
      "name": "encrypt.rsa",
      "type": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$Rsa",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "sourceMethod": "getRsa()"
    },
    {
      "name": "endpoints",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.actuator",
      "type": "org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint"
    },
    {
      "name": "endpoints.auditevents",
      "type": "org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint"
    },
    {
      "name": "endpoints.autoconfig",
      "type": "org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint"
    },
    {
      "name": "endpoints.beans",
      "type": "org.springframework.boot.actuate.endpoint.BeansEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.BeansEndpoint"
    },
    {
      "name": "endpoints.configprops",
      "type": "org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint"
    },
    {
      "name": "endpoints.cors",
      "type": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties"
    },
    {
      "name": "endpoints.docs",
      "type": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint"
    },
    {
      "name": "endpoints.docs.curies",
      "type": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint$Curies",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint",
      "sourceMethod": "getCuries()"
    },
    {
      "name": "endpoints.dump",
      "type": "org.springframework.boot.actuate.endpoint.DumpEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.DumpEndpoint"
    },
    {
      "name": "endpoints.env",
      "type": "org.springframework.boot.actuate.endpoint.EnvironmentEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.EnvironmentEndpoint"
    },
    {
      "name": "endpoints.features",
      "type": "org.springframework.cloud.client.actuator.FeaturesEndpoint",
      "sourceType": "org.springframework.cloud.client.actuator.FeaturesEndpoint"
    },
    {
      "name": "endpoints.flyway",
      "type": "org.springframework.boot.actuate.endpoint.FlywayEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.FlywayEndpoint"
    },
    {
      "name": "endpoints.health",
      "type": "org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties"
    },
    {
      "name": "endpoints.heapdump",
      "type": "org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint"
    },
    {
      "name": "endpoints.info",
      "type": "org.springframework.boot.actuate.endpoint.InfoEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.InfoEndpoint"
    },
    {
      "name": "endpoints.jmx",
      "type": "org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties"
    },
    {
      "name": "endpoints.jolokia",
      "type": "org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint"
    },
    {
      "name": "endpoints.liquibase",
      "type": "org.springframework.boot.actuate.endpoint.LiquibaseEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.LiquibaseEndpoint"
    },
    {
      "name": "endpoints.logfile",
      "type": "org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint"
    },
    {
      "name": "endpoints.loggers",
      "type": "org.springframework.boot.actuate.endpoint.LoggersEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.LoggersEndpoint"
    },
    {
      "name": "endpoints.mappings",
      "type": "org.springframework.boot.actuate.endpoint.RequestMappingEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.RequestMappingEndpoint"
    },
    {
      "name": "endpoints.metrics",
      "type": "org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint"
    },
    {
      "name": "endpoints.metrics.filter",
      "type": "org.springframework.boot.actuate.autoconfigure.MetricFilterProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.MetricFilterProperties"
    },
    {
      "name": "endpoints.pause",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint",
      "sourceType": "org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration",
      "sourceMethod": "pauseEndpoint(org.springframework.cloud.context.restart.RestartEndpoint)"
    },
    {
      "name": "endpoints.refresh",
      "type": "org.springframework.cloud.endpoint.RefreshEndpoint",
      "sourceType": "org.springframework.cloud.endpoint.RefreshEndpoint"
    },
    {
      "name": "endpoints.restart",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint"
    },
    {
      "name": "endpoints.restart.pause-endpoint",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint",
      "sourceMethod": "getPauseEndpoint()"
    },
    {
      "name": "endpoints.restart.resume-endpoint",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint",
      "sourceMethod": "getResumeEndpoint()"
    },
    {
      "name": "endpoints.resume",
      "type": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint",
      "sourceType": "org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration",
      "sourceMethod": "resumeEndpoint(org.springframework.cloud.context.restart.RestartEndpoint)"
    },
    {
      "name": "endpoints.shutdown",
      "type": "org.springframework.boot.actuate.endpoint.ShutdownEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.ShutdownEndpoint"
    },
    {
      "name": "endpoints.trace",
      "type": "org.springframework.boot.actuate.endpoint.TraceEndpoint",
      "sourceType": "org.springframework.boot.actuate.endpoint.TraceEndpoint"
    },
    {
      "name": "flyway",
      "type": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "health.config",
      "type": "org.springframework.cloud.config.client.ConfigClientHealthProperties",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientHealthProperties"
    },
    {
      "name": "jolokia",
      "type": "org.springframework.boot.actuate.autoconfigure.JolokiaProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.JolokiaProperties"
    },
    {
      "name": "liquibase",
      "type": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "log",
      "type": "org.springframework.cloud.stream.app.log.sink.LogSinkProperties",
      "sourceType": "org.springframework.cloud.stream.app.log.sink.LogSinkProperties"
    },
    {
      "name": "logging",
      "type": "org.springframework.boot.logging.LoggingApplicationListener"
    },
    {
      "name": "management",
      "type": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties"
    },
    {
      "name": "management.health.diskspace",
      "type": "org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties",
      "sourceType": "org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties"
    },
    {
      "name": "management.health.elasticsearch",
      "type": "org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties",
      "sourceType": "org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties"
    },
    {
      "name": "management.health.status",
      "type": "org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties"
    },
    {
      "name": "management.info",
      "type": "org.springframework.boot.actuate.autoconfigure.InfoContributorProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.InfoContributorProperties"
    },
    {
      "name": "management.info.git",
      "type": "org.springframework.boot.actuate.autoconfigure.InfoContributorProperties$Git",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.InfoContributorProperties",
      "sourceMethod": "getGit()"
    },
    {
      "name": "management.security",
      "type": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties$Security",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties",
      "sourceMethod": "getSecurity()"
    },
    {
      "name": "management.shell",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties"
    },
    {
      "name": "management.shell.auth",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Auth",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "sourceMethod": "getAuth()"
    },
    {
      "name": "management.shell.auth.jaas",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$JaasAuthenticationProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$JaasAuthenticationProperties"
    },
    {
      "name": "management.shell.auth.key",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$KeyAuthenticationProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$KeyAuthenticationProperties"
    },
    {
      "name": "management.shell.auth.simple",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SimpleAuthenticationProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SimpleAuthenticationProperties"
    },
    {
      "name": "management.shell.auth.simple.user",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SimpleAuthenticationProperties$User",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SimpleAuthenticationProperties",
      "sourceMethod": "getUser()"
    },
    {
      "name": "management.shell.auth.spring",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SpringAuthenticationProperties",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SpringAuthenticationProperties"
    },
    {
      "name": "management.shell.ssh",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Ssh",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "sourceMethod": "getSsh()"
    },
    {
      "name": "management.shell.telnet",
      "type": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Telnet",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "sourceMethod": "getTelnet()"
    },
    {
      "name": "management.ssl",
      "type": "org.springframework.boot.context.embedded.Ssl",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "management.trace",
      "type": "org.springframework.boot.actuate.trace.TraceProperties",
      "sourceType": "org.springframework.boot.actuate.trace.TraceProperties"
    },
    {
      "name": "security",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "security.basic",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getBasic()"
    },
    {
      "name": "security.headers",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getHeaders()"
    },
    {
      "name": "security.oauth2.authorization",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.client",
      "type": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration$BaseClientDetailsConfiguration",
      "sourceMethod": "oauth2ClientDetails()"
    },
    {
      "name": "security.oauth2.resource",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.jwk",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwk",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "sourceMethod": "getJwk()"
    },
    {
      "name": "security.oauth2.resource.jwt",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "sourceMethod": "getJwt()"
    },
    {
      "name": "security.oauth2.sso",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties"
    },
    {
      "name": "security.user",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "sourceMethod": "getUser()"
    },
    {
      "name": "server",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.compression",
      "type": "org.springframework.boot.context.embedded.Compression",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getCompression()"
    },
    {
      "name": "server.error",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getError()"
    },
    {
      "name": "server.jetty",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getJetty()"
    },
    {
      "name": "server.jsp-servlet",
      "type": "org.springframework.boot.context.embedded.JspServlet",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getJspServlet()"
    },
    {
      "name": "server.session",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getSession()"
    },
    {
      "name": "server.session.cookie",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "sourceMethod": "getCookie()"
    },
    {
      "name": "server.ssl",
      "type": "org.springframework.boot.context.embedded.Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "server.tomcat",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getTomcat()"
    },
    {
      "name": "server.tomcat.accesslog",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "sourceMethod": "getAccesslog()"
    },
    {
      "name": "server.undertow",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "sourceMethod": "getUndertow()"
    },
    {
      "name": "server.undertow.accesslog",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "sourceMethod": "getAccesslog()"
    },
    {
      "name": "spring.activemq",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.packages",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceMethod": "getPackages()"
    },
    {
      "name": "spring.activemq.pool",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.activemq.pool.configuration",
      "type": "org.apache.activemq.pool.PooledConnectionFactory",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration$PooledConnectionFactoryConfiguration",
      "sourceMethod": "pooledJmsConnectionFactory(org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties)"
    },
    {
      "name": "spring.artemis",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.embedded",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "spring.batch",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "name": "spring.batch.initializer",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Initializer",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceMethod": "getInitializer()"
    },
    {
      "name": "spring.batch.job",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "sourceMethod": "getJob()"
    },
    {
      "name": "spring.cache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cache.caffeine",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getCaffeine()"
    },
    {
      "name": "spring.cache.couchbase",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getCouchbase()"
    },
    {
      "name": "spring.cache.ehcache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getEhcache()"
    },
    {
      "name": "spring.cache.guava",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Guava",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getGuava()"
    },
    {
      "name": "spring.cache.hazelcast",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Hazelcast",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getHazelcast()"
    },
    {
      "name": "spring.cache.infinispan",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getInfinispan()"
    },
    {
      "name": "spring.cache.jcache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "sourceMethod": "getJcache()"
    },
    {
      "name": "spring.cloud.config",
      "type": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties"
    },
    {
      "name": "spring.cloud.config.discovery",
      "type": "org.springframework.cloud.config.client.ConfigClientProperties$Discovery",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "sourceMethod": "getDiscovery()"
    },
    {
      "name": "spring.cloud.config.retry",
      "type": "org.springframework.cloud.config.client.RetryProperties",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties"
    },
    {
      "name": "spring.cloud.discovery.client.simple",
      "type": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties"
    },
    {
      "name": "spring.cloud.hypermedia",
      "type": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties"
    },
    {
      "name": "spring.cloud.hypermedia.refresh",
      "type": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties$Refresh",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties"
    },
    {
      "name": "spring.cloud.inetutils",
      "type": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties"
    },
    {
      "name": "spring.cloud.loadbalancer.retry",
      "type": "org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties",
      "sourceType": "org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties"
    },
    {
      "name": "spring.cloud.service-registry.auto-registration",
      "type": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties",
      "sourceType": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties"
    },
    {
      "name": "spring.cloud.stream",
      "type": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.metrics",
      "type": "org.springframework.cloud.stream.metrics.ApplicationMetricsProperties",
      "sourceType": "org.springframework.cloud.stream.metrics.ApplicationMetricsProperties"
    },
    {
      "name": "spring.couchbase",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "name": "spring.couchbase.bucket",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceMethod": "getBucket()"
    },
    {
      "name": "spring.couchbase.env",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "sourceMethod": "getEnv()"
    },
    {
      "name": "spring.couchbase.env.endpoints",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getEndpoints()"
    },
    {
      "name": "spring.couchbase.env.ssl",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.couchbase.env.timeouts",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "sourceMethod": "getTimeouts()"
    },
    {
      "name": "spring.data.cassandra",
      "type": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.couchbase",
      "type": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties"
    },
    {
      "name": "spring.data.elasticsearch",
      "type": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.mongodb",
      "type": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.neo4j",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.embedded",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "spring.data.rest",
      "type": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.solr",
      "type": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "name": "spring.datasource",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.dbcp",
      "type": "org.apache.commons.dbcp.BasicDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.dbcp2",
      "type": "org.apache.commons.dbcp2.BasicDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp2",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.hikari",
      "type": "com.zaxxer.hikari.HikariDataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.tomcat",
      "type": "org.apache.tomcat.jdbc.pool.DataSource",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)"
    },
    {
      "name": "spring.datasource.xa",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "sourceMethod": "getXa()"
    },
    {
      "name": "spring.elasticsearch.jest",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.elasticsearch.jest.proxy",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "sourceMethod": "getProxy()"
    },
    {
      "name": "spring.freemarker",
      "type": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.groovy.template",
      "type": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.configuration",
      "type": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration",
      "sourceMethod": "groovyMarkupConfigurer()"
    },
    {
      "name": "spring.h2.console",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties"
    },
    {
      "name": "spring.h2.console.settings",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "sourceMethod": "getSettings()"
    },
    {
      "name": "spring.hateoas",
      "type": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties"
    },
    {
      "name": "spring.hazelcast",
      "type": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties",
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "name": "spring.http.encoding",
      "type": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.multipart",
      "type": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties"
    },
    {
      "name": "spring.info",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties"
    },
    {
      "name": "spring.info.build",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceMethod": "getBuild()"
    },
    {
      "name": "spring.info.git",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "sourceMethod": "getGit()"
    },
    {
      "name": "spring.integration.poller",
      "type": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties"
    },
    {
      "name": "spring.jackson",
      "type": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jersey",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.filter",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceMethod": "getFilter()"
    },
    {
      "name": "spring.jersey.servlet",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.jms",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "name": "spring.jms.listener",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.jms.template",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.jooq",
      "type": "org.springframework.boot.autoconfigure.jooq.JooqProperties",
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "name": "spring.jpa",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.hibernate",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "sourceMethod": "getHibernate()"
    },
    {
      "name": "spring.jpa.hibernate.naming",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "sourceMethod": "getNaming()"
    },
    {
      "name": "spring.jta",
      "type": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory",
      "type": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.datasource",
      "type": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.properties",
      "type": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory",
      "type": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.datasource",
      "type": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.properties",
      "type": "bitronix.tm.Configuration",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.BitronixJtaConfiguration",
      "sourceMethod": "bitronixConfiguration()"
    },
    {
      "name": "spring.jta.narayana",
      "type": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.kafka",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.consumer",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getConsumer()"
    },
    {
      "name": "spring.kafka.listener",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.kafka.producer",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getProducer()"
    },
    {
      "name": "spring.kafka.ssl",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.kafka.template",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.ldap",
      "type": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.embedded",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties"
    },
    {
      "name": "spring.ldap.embedded.credential",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "sourceMethod": "getCredential()"
    },
    {
      "name": "spring.ldap.embedded.validation",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "sourceMethod": "getValidation()"
    },
    {
      "name": "spring.mail",
      "type": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.messages",
      "type": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration"
    },
    {
      "name": "spring.metrics.export",
      "type": "org.springframework.boot.actuate.metrics.export.MetricExportProperties",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties"
    },
    {
      "name": "spring.metrics.export.aggregate",
      "type": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Aggregate",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties",
      "sourceMethod": "getAggregate()"
    },
    {
      "name": "spring.metrics.export.redis",
      "type": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Redis",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties",
      "sourceMethod": "getRedis()"
    },
    {
      "name": "spring.metrics.export.statsd",
      "type": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Statsd",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties",
      "sourceMethod": "getStatsd()"
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver",
      "type": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties"
    },
    {
      "name": "spring.mongodb.embedded",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties"
    },
    {
      "name": "spring.mongodb.embedded.storage",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "sourceMethod": "getStorage()"
    },
    {
      "name": "spring.mustache",
      "type": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mvc",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.async",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Async",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceMethod": "getAsync()"
    },
    {
      "name": "spring.mvc.servlet",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceMethod": "getServlet()"
    },
    {
      "name": "spring.mvc.view",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "sourceMethod": "getView()"
    },
    {
      "name": "spring.rabbitmq",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.cache",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getCache()"
    },
    {
      "name": "spring.rabbitmq.cache.channel",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceMethod": "getChannel()"
    },
    {
      "name": "spring.rabbitmq.cache.connection",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "sourceMethod": "getConnection()"
    },
    {
      "name": "spring.rabbitmq.listener",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "spring.rabbitmq.listener.retry",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "sourceMethod": "getRetry()"
    },
    {
      "name": "spring.rabbitmq.ssl",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "spring.rabbitmq.template",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "sourceMethod": "getTemplate()"
    },
    {
      "name": "spring.rabbitmq.template.retry",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "sourceMethod": "getRetry()"
    },
    {
      "name": "spring.redis",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.cluster",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getCluster()"
    },
    {
      "name": "spring.redis.pool",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getPool()"
    },
    {
      "name": "spring.redis.sentinel",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "sourceMethod": "getSentinel()"
    },
    {
      "name": "spring.resources",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "name": "spring.resources.chain",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "sourceMethod": "getChain()"
    },
    {
      "name": "spring.resources.chain.strategy",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "sourceMethod": "getStrategy()"
    },
    {
      "name": "spring.resources.chain.strategy.content",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceMethod": "getContent()"
    },
    {
      "name": "spring.resources.chain.strategy.fixed",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "sourceMethod": "getFixed()"
    },
    {
      "name": "spring.sendgrid",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.proxy",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "sourceMethod": "getProxy()"
    },
    {
      "name": "spring.session",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "name": "spring.session.hazelcast",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getHazelcast()"
    },
    {
      "name": "spring.session.jdbc",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getJdbc()"
    },
    {
      "name": "spring.session.jdbc.initializer",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc$Initializer",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "sourceMethod": "getInitializer()"
    },
    {
      "name": "spring.session.mongo",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Mongo",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getMongo()"
    },
    {
      "name": "spring.session.redis",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "sourceMethod": "getRedis()"
    },
    {
      "name": "spring.social.facebook",
      "type": "org.springframework.boot.autoconfigure.social.FacebookProperties",
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties"
    },
    {
      "name": "spring.social.linkedin",
      "type": "org.springframework.boot.autoconfigure.social.LinkedInProperties",
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties"
    },
    {
      "name": "spring.social.twitter",
      "type": "org.springframework.boot.autoconfigure.social.TwitterProperties",
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties"
    },
    {
      "name": "spring.thymeleaf",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.transaction",
      "type": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "name": "spring.webservices",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties"
    },
    {
      "name": "spring.webservices.servlet",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "sourceMethod": "getServlet()"
    }
  ],
  "properties": [
    {
      "name": "banner.charset",
      "type": "java.nio.charset.Charset",
      "description": "Banner file encoding.",
      "defaultValue": "UTF-8"
    },
    {
      "name": "banner.image.height",
      "type": "java.lang.Integer",
      "description": "Banner image height (in chars)."
    },
    {
      "name": "banner.image.invert",
      "type": "java.lang.Boolean",
      "description": "Invert images for dark console themes.",
      "defaultValue": false
    },
    {
      "name": "banner.image.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Banner image file location (jpg/png can also be used).",
      "defaultValue": "banner.gif"
    },
    {
      "name": "banner.image.margin",
      "type": "java.lang.Integer",
      "description": "Left hand image margin (in chars)."
    },
    {
      "name": "banner.image.width",
      "type": "java.lang.Integer",
      "description": "Banner image width (in chars)."
    },
    {
      "name": "banner.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Banner text resource location.",
      "defaultValue": "classpath:banner.txt"
    },
    {
      "name": "debug",
      "type": "java.lang.Boolean",
      "description": "Enable debug logs.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener",
      "defaultValue": false
    },
    {
      "name": "encrypt.fail-on-error",
      "type": "java.lang.Boolean",
      "description": "Flag to say that a process should fail if there is an encryption or decryption\n error.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties",
      "defaultValue": true
    },
    {
      "name": "encrypt.key",
      "type": "java.lang.String",
      "description": "A symmetric key. As a stronger alternative consider using a keystore.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties"
    },
    {
      "name": "encrypt.key-store.alias",
      "type": "java.lang.String",
      "description": "Alias for a key in the store.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.key-store.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file, e.g. classpath:/keystore.jks.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.key-store.password",
      "type": "java.lang.String",
      "description": "Password that locks the keystore.",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.key-store.secret",
      "type": "java.lang.String",
      "description": "Secret protecting the key (defaults to the same as the password).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$KeyStore"
    },
    {
      "name": "encrypt.rsa.algorithm",
      "type": "org.springframework.security.rsa.crypto.RsaAlgorithm",
      "description": "The RSA algorithm to use (DEFAULT or OEAP). Once it is set do not change it (or\n existing ciphers will not a decryptable).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$Rsa"
    },
    {
      "name": "encrypt.rsa.salt",
      "type": "java.lang.String",
      "description": "Salt for the random secret used to encrypt cipher text. Once it is set do not\n change it (or existing ciphers will not a decryptable).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$Rsa",
      "defaultValue": "deadbeef"
    },
    {
      "name": "encrypt.rsa.strong",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that \"strong\" AES encryption should be used internally. If\n true then the GCM algorithm is applied to the AES encrypted bytes. Default is\n false (in which case \"standard\" CBC is used instead). Once it is set do not\n change it (or existing ciphers will not a decryptable).",
      "sourceType": "org.springframework.cloud.bootstrap.encrypt.KeyProperties$Rsa",
      "defaultValue": false
    },
    {
      "name": "endpoints.actuator.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint"
    },
    {
      "name": "endpoints.actuator.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint"
    },
    {
      "name": "endpoints.actuator.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HalJsonMvcEndpoint"
    },
    {
      "name": "endpoints.auditevents.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint"
    },
    {
      "name": "endpoints.auditevents.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint"
    },
    {
      "name": "endpoints.auditevents.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint"
    },
    {
      "name": "endpoints.autoconfig.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint"
    },
    {
      "name": "endpoints.autoconfig.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint"
    },
    {
      "name": "endpoints.autoconfig.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path."
    },
    {
      "name": "endpoints.autoconfig.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint"
    },
    {
      "name": "endpoints.beans.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.BeansEndpoint"
    },
    {
      "name": "endpoints.beans.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.BeansEndpoint"
    },
    {
      "name": "endpoints.beans.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path."
    },
    {
      "name": "endpoints.beans.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.BeansEndpoint"
    },
    {
      "name": "endpoints.configprops.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint"
    },
    {
      "name": "endpoints.configprops.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint"
    },
    {
      "name": "endpoints.configprops.keys-to-sanitize",
      "type": "java.lang.String[]",
      "description": "Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.",
      "sourceType": "org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint",
      "defaultValue": [
        "password",
        "secret",
        "key",
        "token",
        ".*credentials.*",
        "vcap_services"
      ]
    },
    {
      "name": "endpoints.configprops.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path."
    },
    {
      "name": "endpoints.configprops.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint"
    },
    {
      "name": "endpoints.cors.allow-credentials",
      "type": "java.lang.Boolean",
      "description": "Set whether credentials are supported. When not set, credentials are not supported.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties"
    },
    {
      "name": "endpoints.cors.allowed-headers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of headers to allow in a request. '*' allows all headers.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties"
    },
    {
      "name": "endpoints.cors.allowed-methods",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of methods to allow. '*' allows all methods. When not set,\n defaults to GET.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties"
    },
    {
      "name": "endpoints.cors.allowed-origins",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of origins to allow. '*' allows all origins. When not set,\n CORS support is disabled.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties"
    },
    {
      "name": "endpoints.cors.exposed-headers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of headers to include in a response.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties"
    },
    {
      "name": "endpoints.cors.max-age",
      "type": "java.lang.Long",
      "description": "How long, in seconds, the response from a pre-flight request can be cached by\n clients.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties",
      "defaultValue": 1800
    },
    {
      "name": "endpoints.docs.curies.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the curie generation.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint$Curies",
      "defaultValue": false
    },
    {
      "name": "endpoints.docs.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint"
    },
    {
      "name": "endpoints.docs.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint"
    },
    {
      "name": "endpoints.docs.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.DocsMvcEndpoint"
    },
    {
      "name": "endpoints.dump.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.DumpEndpoint"
    },
    {
      "name": "endpoints.dump.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.DumpEndpoint"
    },
    {
      "name": "endpoints.dump.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path."
    },
    {
      "name": "endpoints.dump.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.DumpEndpoint"
    },
    {
      "name": "endpoints.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable endpoints.",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint",
      "defaultValue": true
    },
    {
      "name": "endpoints.env.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.EnvironmentEndpoint"
    },
    {
      "name": "endpoints.env.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.EnvironmentEndpoint"
    },
    {
      "name": "endpoints.env.keys-to-sanitize",
      "type": "java.lang.String[]",
      "description": "Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.",
      "sourceType": "org.springframework.boot.actuate.endpoint.EnvironmentEndpoint",
      "defaultValue": [
        "password",
        "secret",
        "key",
        "token",
        ".*credentials.*",
        "vcap_services"
      ]
    },
    {
      "name": "endpoints.env.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint"
    },
    {
      "name": "endpoints.env.post.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable changing the Environment through a POST to /env.",
      "defaultValue": true
    },
    {
      "name": "endpoints.env.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.EnvironmentEndpoint"
    },
    {
      "name": "endpoints.features.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.client.actuator.FeaturesEndpoint"
    },
    {
      "name": "endpoints.features.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.client.actuator.FeaturesEndpoint"
    },
    {
      "name": "endpoints.features.sensitive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.client.actuator.FeaturesEndpoint"
    },
    {
      "name": "endpoints.flyway.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.FlywayEndpoint"
    },
    {
      "name": "endpoints.flyway.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.FlywayEndpoint"
    },
    {
      "name": "endpoints.flyway.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.FlywayEndpoint"
    },
    {
      "name": "endpoints.health.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.HealthEndpoint"
    },
    {
      "name": "endpoints.health.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.HealthEndpoint"
    },
    {
      "name": "endpoints.health.mapping",
      "type": "java.util.Map<java.lang.String,org.springframework.http.HttpStatus>",
      "description": "Mapping of health statuses to HttpStatus codes. By default, registered health\n statuses map to sensible defaults (i.e. UP maps to 200).",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties"
    },
    {
      "name": "endpoints.health.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint"
    },
    {
      "name": "endpoints.health.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.HealthEndpoint"
    },
    {
      "name": "endpoints.health.time-to-live",
      "type": "java.lang.Long",
      "description": "Time to live for cached result, in milliseconds.",
      "sourceType": "org.springframework.boot.actuate.endpoint.HealthEndpoint",
      "defaultValue": 1000
    },
    {
      "name": "endpoints.heapdump.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint"
    },
    {
      "name": "endpoints.heapdump.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint"
    },
    {
      "name": "endpoints.heapdump.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint"
    },
    {
      "name": "endpoints.hypermedia.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable hypermedia support for endpoints.",
      "defaultValue": false
    },
    {
      "name": "endpoints.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.info.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.InfoEndpoint"
    },
    {
      "name": "endpoints.info.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.InfoEndpoint"
    },
    {
      "name": "endpoints.info.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path."
    },
    {
      "name": "endpoints.info.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.InfoEndpoint"
    },
    {
      "name": "endpoints.jmx.domain",
      "type": "java.lang.String",
      "description": "JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties"
    },
    {
      "name": "endpoints.jmx.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JMX export of all endpoints.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties",
      "defaultValue": true
    },
    {
      "name": "endpoints.jmx.static-names",
      "type": "java.util.Properties",
      "description": "Additional static properties to append to all ObjectNames of MBeans representing\n Endpoints.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties"
    },
    {
      "name": "endpoints.jmx.unique-names",
      "type": "java.lang.Boolean",
      "description": "Ensure that ObjectNames are modified in case of conflict.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties",
      "defaultValue": false
    },
    {
      "name": "endpoints.jolokia.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint"
    },
    {
      "name": "endpoints.jolokia.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint"
    },
    {
      "name": "endpoints.jolokia.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.JolokiaMvcEndpoint"
    },
    {
      "name": "endpoints.liquibase.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.LiquibaseEndpoint"
    },
    {
      "name": "endpoints.liquibase.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.LiquibaseEndpoint"
    },
    {
      "name": "endpoints.liquibase.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.LiquibaseEndpoint"
    },
    {
      "name": "endpoints.logfile.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint"
    },
    {
      "name": "endpoints.logfile.external-file",
      "type": "java.io.File",
      "description": "External Logfile to be accessed. Can be used if the logfile is written by output\n redirect and not by the logging-system itself.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint"
    },
    {
      "name": "endpoints.logfile.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint"
    },
    {
      "name": "endpoints.logfile.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint"
    },
    {
      "name": "endpoints.loggers.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.LoggersEndpoint"
    },
    {
      "name": "endpoints.loggers.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.LoggersEndpoint"
    },
    {
      "name": "endpoints.loggers.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint"
    },
    {
      "name": "endpoints.loggers.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.LoggersEndpoint"
    },
    {
      "name": "endpoints.mappings.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.RequestMappingEndpoint"
    },
    {
      "name": "endpoints.mappings.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.RequestMappingEndpoint"
    },
    {
      "name": "endpoints.mappings.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path."
    },
    {
      "name": "endpoints.mappings.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.RequestMappingEndpoint"
    },
    {
      "name": "endpoints.metrics.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.MetricsEndpoint"
    },
    {
      "name": "endpoints.metrics.filter.counter-submissions",
      "type": "java.util.Set<org.springframework.boot.actuate.autoconfigure.MetricsFilterSubmission>",
      "description": "Submissions that should be made to the counter.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.MetricFilterProperties"
    },
    {
      "name": "endpoints.metrics.filter.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the metrics servlet filter.",
      "defaultValue": true
    },
    {
      "name": "endpoints.metrics.filter.gauge-submissions",
      "type": "java.util.Set<org.springframework.boot.actuate.autoconfigure.MetricsFilterSubmission>",
      "description": "Submissions that should be made to the gauge.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.MetricFilterProperties"
    },
    {
      "name": "endpoints.metrics.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.MetricsEndpoint"
    },
    {
      "name": "endpoints.metrics.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint"
    },
    {
      "name": "endpoints.metrics.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.MetricsEndpoint"
    },
    {
      "name": "endpoints.pause.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /pause endpoint (to send Lifecycle.stop()).",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint",
      "defaultValue": true
    },
    {
      "name": "endpoints.pause.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.pause.sensitive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.refresh.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /refresh endpoint to refresh configuration and re-initialize refresh scoped beans.",
      "sourceType": "org.springframework.cloud.endpoint.RefreshEndpoint",
      "defaultValue": true
    },
    {
      "name": "endpoints.refresh.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.endpoint.RefreshEndpoint"
    },
    {
      "name": "endpoints.refresh.sensitive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.endpoint.RefreshEndpoint"
    },
    {
      "name": "endpoints.restart.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /restart endpoint to restart the application context.",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint",
      "defaultValue": true
    },
    {
      "name": "endpoints.restart.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint"
    },
    {
      "name": "endpoints.restart.pause-endpoint.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.restart.pause-endpoint.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.restart.pause-endpoint.sensitive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.restart.resume-endpoint.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint"
    },
    {
      "name": "endpoints.restart.resume-endpoint.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint"
    },
    {
      "name": "endpoints.restart.resume-endpoint.sensitive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint"
    },
    {
      "name": "endpoints.restart.sensitive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint"
    },
    {
      "name": "endpoints.restart.timeout",
      "type": "java.lang.Long",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint",
      "defaultValue": 0
    },
    {
      "name": "endpoints.resume.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the /resume endpoint (to send Lifecycle.start()).",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint",
      "defaultValue": true
    },
    {
      "name": "endpoints.resume.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint"
    },
    {
      "name": "endpoints.resume.sensitive",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$ResumeEndpoint"
    },
    {
      "name": "endpoints.sensitive",
      "type": "java.lang.Boolean",
      "description": "Default endpoint sensitive setting.",
      "sourceType": "org.springframework.cloud.context.restart.RestartEndpoint$PauseEndpoint"
    },
    {
      "name": "endpoints.shutdown.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.ShutdownEndpoint"
    },
    {
      "name": "endpoints.shutdown.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.ShutdownEndpoint"
    },
    {
      "name": "endpoints.shutdown.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path.",
      "sourceType": "org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint"
    },
    {
      "name": "endpoints.shutdown.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.ShutdownEndpoint"
    },
    {
      "name": "endpoints.trace.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the endpoint.",
      "sourceType": "org.springframework.boot.actuate.endpoint.TraceEndpoint"
    },
    {
      "name": "endpoints.trace.id",
      "type": "java.lang.String",
      "description": "Endpoint identifier. With HTTP monitoring the identifier of the endpoint is mapped\n to a URL (e.g. 'foo' is mapped to '/foo').",
      "sourceType": "org.springframework.boot.actuate.endpoint.TraceEndpoint"
    },
    {
      "name": "endpoints.trace.path",
      "type": "java.lang.String",
      "description": "Endpoint URL path."
    },
    {
      "name": "endpoints.trace.sensitive",
      "type": "java.lang.Boolean",
      "description": "Mark if the endpoint exposes sensitive information.",
      "sourceType": "org.springframework.boot.actuate.endpoint.TraceEndpoint"
    },
    {
      "name": "error.path",
      "type": "java.lang.String",
      "description": "Path of the error controller.",
      "deprecated": true,
      "deprecation": {"replacement": "server.error.path"}
    },
    {
      "name": "flyway.baseline-description",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.baseline-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.baseline-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.check-location",
      "type": "java.lang.Boolean",
      "description": "Check that migration scripts location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": false
    },
    {
      "name": "flyway.clean-on-validation-error",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable flyway.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": true
    },
    {
      "name": "flyway.encoding",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.ignore-failed-future-migration",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.init-description",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.init-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.init-sqls",
      "type": "java.util.List<java.lang.String>",
      "description": "SQL statements to execute to initialize a connection immediately after obtaining\n it.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.init-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "flyway.locations",
      "type": "java.util.List<java.lang.String>",
      "description": "Locations of migrations scripts. Can contain the special \"{vendor}\" placeholder to\n use vendor-specific locations.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.out-of-order",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.password",
      "type": "java.lang.String",
      "description": "Login password of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.placeholder-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.placeholder-replacement",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.placeholder-suffix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.placeholders",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.schemas",
      "type": "java.lang.String[]",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.sql-migration-prefix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.sql-migration-separator",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.sql-migration-suffix",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.table",
      "type": "java.lang.String",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.target",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "flyway.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "name": "flyway.validate-on-migrate",
      "type": "java.lang.Boolean",
      "sourceType": "org.flywaydb.core.Flyway"
    },
    {
      "name": "health.config.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that the config server health indicator should be installed.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientHealthProperties",
      "defaultValue": false
    },
    {
      "name": "health.config.time-to-live",
      "type": "java.lang.Long",
      "description": "Time to live for cached result, in milliseconds. Default 300000 (5 min).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientHealthProperties",
      "defaultValue": 0
    },
    {
      "name": "info",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "Arbitrary properties to add to the info endpoint."
    },
    {
      "name": "jolokia.config",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Jolokia settings. These are traditionally set using servlet parameters. Refer to\n the documentation of Jolokia for more details.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.JolokiaProperties"
    },
    {
      "name": "liquibase.change-log",
      "type": "java.lang.String",
      "description": "Change log configuration path.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": "classpath:/db/changelog/db.changelog-master.yaml"
    },
    {
      "name": "liquibase.check-change-log-location",
      "type": "java.lang.Boolean",
      "description": "Check the change log location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true
    },
    {
      "name": "liquibase.contexts",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime contexts to use.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.default-schema",
      "type": "java.lang.String",
      "description": "Default database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.drop-first",
      "type": "java.lang.Boolean",
      "description": "Drop the database schema first.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": false
    },
    {
      "name": "liquibase.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable liquibase support.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true
    },
    {
      "name": "liquibase.labels",
      "type": "java.lang.String",
      "description": "Comma-separated list of runtime labels to use.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Change log parameters.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.password",
      "type": "java.lang.String",
      "description": "Login password of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.rollback-file",
      "type": "java.io.File",
      "description": "File to which rollback SQL will be written when an update is performed.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source\n is used.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "liquibase.user",
      "type": "java.lang.String",
      "description": "Login user of the database to migrate.",
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "name": "log.expression",
      "type": "java.lang.String",
      "description": "A SpEL expression (against the incoming message) to evaluate as the logged message.",
      "sourceType": "org.springframework.cloud.stream.app.log.sink.LogSinkProperties",
      "defaultValue": "payload"
    },
    {
      "name": "log.level",
      "type": "org.springframework.integration.handler.LoggingHandler$Level",
      "description": "The level at which to log messages.",
      "sourceType": "org.springframework.cloud.stream.app.log.sink.LogSinkProperties"
    },
    {
      "name": "log.name",
      "type": "java.lang.String",
      "description": "The name of the logger to use.",
      "sourceType": "org.springframework.cloud.stream.app.log.sink.LogSinkProperties"
    },
    {
      "name": "logging.config",
      "type": "java.lang.String",
      "description": "Location of the logging configuration file.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.exception-conversion-word",
      "type": "java.lang.String",
      "description": "Conversion word used when logging exceptions.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener",
      "defaultValue": "%wEx"
    },
    {
      "name": "logging.file",
      "type": "java.lang.String",
      "description": "Name of the log file. Names can be an exact location or relative to the current directory.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.level",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Log levels severity mapping. Use 'root' for the root logger.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.path",
      "type": "java.lang.String",
      "description": "Directory where log files are written.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.pattern.console",
      "type": "java.lang.String",
      "description": "Appender pattern for output to the console. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener",
      "defaultValue": "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    },
    {
      "name": "logging.pattern.file",
      "type": "java.lang.String",
      "description": "Appender pattern for output to the file. Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener",
      "defaultValue": "%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    },
    {
      "name": "logging.pattern.level",
      "type": "java.lang.String",
      "description": "Appender pattern for log level (default %5p). Only supported with the default logback setup.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener"
    },
    {
      "name": "logging.register-shutdown-hook",
      "type": "java.lang.Boolean",
      "description": "Register a shutdown hook for the logging system when it is initialized.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener"
    },
    {
      "name": "management.add-application-context-header",
      "type": "java.lang.Boolean",
      "description": "Add the \"X-Application-Context\" HTTP header in each response.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties",
      "defaultValue": true
    },
    {
      "name": "management.address",
      "type": "java.net.InetAddress",
      "description": "Network address that the management endpoints should bind to.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties"
    },
    {
      "name": "management.cloudfoundry.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable extended Cloud Foundry actuator endpoints.",
      "defaultValue": true
    },
    {
      "name": "management.cloudfoundry.skip-ssl-validation",
      "type": "java.lang.Boolean",
      "description": "Skip SSL verification for Cloud Foundry actuator endpoint security calls.",
      "defaultValue": false
    },
    {
      "name": "management.context-path",
      "type": "java.lang.String",
      "description": "Management endpoint context-path.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties",
      "defaultValue": ""
    },
    {
      "name": "management.health.cassandra.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable cassandra health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.couchbase.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable couchbase health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.db.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable database health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.defaults.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable default health indicators.",
      "defaultValue": true
    },
    {
      "name": "management.health.diskspace.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable disk space health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.diskspace.path",
      "type": "java.io.File",
      "description": "Path used to compute the available disk space.",
      "sourceType": "org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties"
    },
    {
      "name": "management.health.diskspace.threshold",
      "type": "java.lang.Long",
      "description": "Minimum disk space that should be available, in bytes.",
      "sourceType": "org.springframework.boot.actuate.health.DiskSpaceHealthIndicatorProperties",
      "defaultValue": 0
    },
    {
      "name": "management.health.elasticsearch.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable elasticsearch health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.elasticsearch.indices",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated index names.",
      "sourceType": "org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties"
    },
    {
      "name": "management.health.elasticsearch.response-timeout",
      "type": "java.lang.Long",
      "description": "Time, in milliseconds, to wait for a response from the cluster.",
      "sourceType": "org.springframework.boot.actuate.health.ElasticsearchHealthIndicatorProperties",
      "defaultValue": 100
    },
    {
      "name": "management.health.jms.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JMS health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.ldap.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable LDAP health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.mail.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Mail health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.mongo.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MongoDB health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.rabbit.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable RabbitMQ health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.redis.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Redis health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.refresh.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the health endpoint for the refresh scope.",
      "defaultValue": true
    },
    {
      "name": "management.health.solr.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Solr health check.",
      "defaultValue": true
    },
    {
      "name": "management.health.status.order",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of health statuses in order of severity.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties"
    },
    {
      "name": "management.info.build.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable build info.",
      "defaultValue": true
    },
    {
      "name": "management.info.defaults.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable default info contributors.",
      "defaultValue": true
    },
    {
      "name": "management.info.env.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable environment info.",
      "defaultValue": true
    },
    {
      "name": "management.info.git.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable git info.",
      "defaultValue": true
    },
    {
      "name": "management.info.git.mode",
      "type": "org.springframework.boot.actuate.info.InfoPropertiesInfoContributor$Mode",
      "description": "Mode to use to expose git information.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.InfoContributorProperties$Git",
      "defaultValue": "simple"
    },
    {
      "name": "management.port",
      "type": "java.lang.Integer",
      "description": "Management endpoint HTTP port. Use the same port as the application by default.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties"
    },
    {
      "name": "management.security.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable security.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties$Security",
      "defaultValue": true
    },
    {
      "name": "management.security.roles",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of roles that can access the management endpoint.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties$Security",
      "defaultValue": "ACTUATOR"
    },
    {
      "name": "management.security.sessions",
      "type": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties$SessionCreationPolicy",
      "description": "Session creating policy for security use (always, never, if_required,\n stateless).",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ManagementServerProperties$Security",
      "defaultValue": "stateless"
    },
    {
      "name": "management.shell.auth.jaas.domain",
      "type": "java.lang.String",
      "description": "JAAS domain.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$JaasAuthenticationProperties",
      "defaultValue": "my-domain"
    },
    {
      "name": "management.shell.auth.key.path",
      "type": "java.lang.String",
      "description": "Path to the authentication key. This should point to a valid \".pem\" file.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$KeyAuthenticationProperties"
    },
    {
      "name": "management.shell.auth.simple.user.name",
      "type": "java.lang.String",
      "description": "Login user.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SimpleAuthenticationProperties$User",
      "defaultValue": "user"
    },
    {
      "name": "management.shell.auth.simple.user.password",
      "type": "java.lang.String",
      "description": "Login password.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SimpleAuthenticationProperties$User"
    },
    {
      "name": "management.shell.auth.spring.roles",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of required roles to login to the CRaSH console.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$SpringAuthenticationProperties",
      "defaultValue": ["ACTUATOR"]
    },
    {
      "name": "management.shell.auth.type",
      "type": "java.lang.String",
      "description": "Authentication type. Auto-detected according to the environment (i.e. if Spring\n Security is available, \"spring\" is used by default).",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Auth",
      "defaultValue": "simple"
    },
    {
      "name": "management.shell.command-path-patterns",
      "type": "java.lang.String[]",
      "description": "Patterns to use to look for commands.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "defaultValue": [
        "classpath*:/commands/**",
        "classpath*:/crash/commands/**"
      ],
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "management.shell.command-refresh-interval",
      "type": "java.lang.Integer",
      "description": "Scan for changes and update the command if necessary (in seconds).",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "defaultValue": -1,
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "management.shell.config-path-patterns",
      "type": "java.lang.String[]",
      "description": "Patterns to use to look for configurations.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "defaultValue": ["classpath*:/crash/*"],
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "management.shell.disabled-commands",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of commands to disable.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "defaultValue": [
        "jpa*",
        "jdbc*",
        "jndi*"
      ],
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "management.shell.disabled-plugins",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of plugins to disable. Certain plugins are disabled by default\n based on the environment.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties",
      "defaultValue": [],
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "management.shell.ssh.auth-timeout",
      "type": "java.lang.Integer",
      "description": "Number of milliseconds after user will be prompted to login again.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Ssh",
      "defaultValue": 600000
    },
    {
      "name": "management.shell.ssh.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable CRaSH SSH support.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Ssh",
      "defaultValue": true
    },
    {
      "name": "management.shell.ssh.idle-timeout",
      "type": "java.lang.Integer",
      "description": "Number of milliseconds after which unused connections are closed.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Ssh",
      "defaultValue": 600000
    },
    {
      "name": "management.shell.ssh.key-path",
      "type": "java.lang.String",
      "description": "Path to the SSH server key.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Ssh"
    },
    {
      "name": "management.shell.ssh.port",
      "type": "java.lang.Integer",
      "description": "SSH port.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Ssh",
      "defaultValue": 2000
    },
    {
      "name": "management.shell.telnet.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is\n available.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Telnet",
      "defaultValue": false
    },
    {
      "name": "management.shell.telnet.port",
      "type": "java.lang.Integer",
      "description": "Telnet port.",
      "sourceType": "org.springframework.boot.actuate.autoconfigure.ShellProperties$Telnet",
      "defaultValue": 5000
    },
    {
      "name": "management.ssl.ciphers",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.client-auth",
      "type": "org.springframework.boot.context.embedded.Ssl$ClientAuth",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.enabled-protocols",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.key-alias",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.key-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.key-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.key-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.key-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.key-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.protocol",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.trust-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.trust-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.trust-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.ssl.trust-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "management.trace.include",
      "type": "java.util.Set<org.springframework.boot.actuate.trace.TraceProperties.Include>",
      "description": "Items to be included in the trace. Defaults to request/response headers (including\n cookies) and errors.",
      "sourceType": "org.springframework.boot.actuate.trace.TraceProperties"
    },
    {
      "name": "security.basic.authorize-mode",
      "type": "org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode",
      "description": "Security authorize mode to apply.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": "role"
    },
    {
      "name": "security.basic.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable basic authentication.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": true
    },
    {
      "name": "security.basic.path",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of paths to secure.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": ["/**"]
    },
    {
      "name": "security.basic.realm",
      "type": "java.lang.String",
      "description": "HTTP basic realm name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": "Spring"
    },
    {
      "name": "security.enable-csrf",
      "type": "java.lang.Boolean",
      "description": "Enable Cross Site Request Forgery support.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": false
    },
    {
      "name": "security.filter-dispatcher-types",
      "type": "java.util.Set<java.lang.String>",
      "description": "Security filter chain dispatcher types.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "security.filter-order",
      "type": "java.lang.Integer",
      "description": "Security filter chain order.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": 0
    },
    {
      "name": "security.headers.cache",
      "type": "java.lang.Boolean",
      "description": "Enable cache control HTTP headers.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.headers.content-security-policy",
      "type": "java.lang.String",
      "description": "Value for content security policy header.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers"
    },
    {
      "name": "security.headers.content-security-policy-mode",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers$ContentSecurityPolicyMode",
      "description": "Content security policy mode.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": "default"
    },
    {
      "name": "security.headers.content-type",
      "type": "java.lang.Boolean",
      "description": "Enable \"X-Content-Type-Options\" header.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.headers.frame",
      "type": "java.lang.Boolean",
      "description": "Enable \"X-Frame-Options\" header.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.headers.hsts",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers$HSTS",
      "description": "HTTP Strict Transport Security (HSTS) mode (none, domain, all).",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": "all"
    },
    {
      "name": "security.headers.xss",
      "type": "java.lang.Boolean",
      "description": "Enable cross site scripting (XSS) protection.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true
    },
    {
      "name": "security.ignored",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of paths to exclude from the default secured paths.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "name": "security.oauth2.authorization.check-token-access",
      "type": "java.lang.String",
      "description": "Spring Security access rule for the check token endpoint (e.g. a SpEL expression\n like \"isAuthenticated()\") . Default is empty, which is interpreted as \"denyAll()\"\n (no access).",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.authorization.realm",
      "type": "java.lang.String",
      "description": "Realm name for client authentication. If an unauthenticated request comes in to the\n token endpoint, it will respond with a challenge including this name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.authorization.token-key-access",
      "type": "java.lang.String",
      "description": "Spring Security access rule for the token key endpoint (e.g. a SpEL expression like\n \"isAuthenticated()\"). Default is empty, which is interpreted as \"denyAll()\" (no\n access).",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "name": "security.oauth2.client.access-token-uri",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.access-token-validity-seconds",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.additional-information",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.authorities",
      "type": "java.util.Collection<org.springframework.security.core.GrantedAuthority>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.authorized-grant-types",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.auto-approve-scopes",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.client-authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String",
      "description": "OAuth2 client id.",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String",
      "description": "OAuth2 client secret. A random secret is generated by default.",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.grant-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.pre-established-redirect-uri",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.refresh-token-validity-seconds",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.registered-redirect-uri",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.resource-ids",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.scope",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "name": "security.oauth2.client.token-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.use-current-uri",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.client.user-authorization-uri",
      "type": "java.lang.String",
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "name": "security.oauth2.resource.filter-order",
      "type": "java.lang.Integer",
      "description": "The order of the filter chain used to authenticate tokens. Default puts it after\n the actuator endpoints and before the default HTTP basic filter chain (catchall).",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": 0
    },
    {
      "name": "security.oauth2.resource.id",
      "type": "java.lang.String",
      "description": "Identifier of the resource.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.jwk.key-set-uri",
      "type": "java.lang.String",
      "description": "The URI to get verification keys to verify the JWT token. This can be set when\n the authorization server returns a set of verification keys.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwk"
    },
    {
      "name": "security.oauth2.resource.jwt.key-uri",
      "type": "java.lang.String",
      "description": "The URI of the JWT token. Can be set if the value is not available and the key\n is public.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt"
    },
    {
      "name": "security.oauth2.resource.jwt.key-value",
      "type": "java.lang.String",
      "description": "The verification key of the JWT token. Can either be a symmetric secret or\n PEM-encoded RSA public key. If the value is not available, you can set the URI\n instead.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt"
    },
    {
      "name": "security.oauth2.resource.prefer-token-info",
      "type": "java.lang.Boolean",
      "description": "Use the token info, can be set to false to use the user info.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": true
    },
    {
      "name": "security.oauth2.resource.service-id",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": "resource"
    },
    {
      "name": "security.oauth2.resource.token-info-uri",
      "type": "java.lang.String",
      "description": "URI of the token decoding endpoint.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.token-type",
      "type": "java.lang.String",
      "description": "The token type to send when using the userInfoUri.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.resource.user-info-uri",
      "type": "java.lang.String",
      "description": "URI of the user endpoint.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "name": "security.oauth2.sso.filter-order",
      "type": "java.lang.Integer",
      "description": "Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter (in\n which case the order can be provided there instead).",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties"
    },
    {
      "name": "security.oauth2.sso.login-path",
      "type": "java.lang.String",
      "description": "Path to the login page, i.e. the one that triggers the redirect to the OAuth2\n Authorization Server.",
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties",
      "defaultValue": "/login"
    },
    {
      "name": "security.require-ssl",
      "type": "java.lang.Boolean",
      "description": "Enable secure channel for all requests.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": false
    },
    {
      "name": "security.sessions",
      "type": "org.springframework.security.config.http.SessionCreationPolicy",
      "description": "Session creation policy (always, never, if_required, stateless).",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": "stateless"
    },
    {
      "name": "security.user.name",
      "type": "java.lang.String",
      "description": "Default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "defaultValue": "user"
    },
    {
      "name": "security.user.password",
      "type": "java.lang.String",
      "description": "Password for the default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "name": "security.user.role",
      "type": "java.util.List<java.lang.String>",
      "description": "Granted roles for the default user name.",
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "name": "server.address",
      "type": "java.net.InetAddress",
      "description": "Network address to which the server should bind to.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.compression.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.compression.excluded-user-agents",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.compression.mime-types",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.compression.min-response-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "name": "server.connection-timeout",
      "type": "java.lang.Integer",
      "description": "Time in milliseconds that connectors will wait for another HTTP request before\n closing the connection. When not set, the connector's container-specific default\n will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.context-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "ServletContext parameters.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.context-path",
      "type": "java.lang.String",
      "description": "Context path of the application.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.display-name",
      "type": "java.lang.String",
      "description": "Display name of the application.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": "application"
    },
    {
      "name": "server.error.include-stacktrace",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace",
      "description": "When to include a \"stacktrace\" attribute.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "never"
    },
    {
      "name": "server.error.path",
      "type": "java.lang.String",
      "description": "Path of the error controller.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "/error"
    },
    {
      "name": "server.error.whitelabel.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the default error page displayed in browsers in case of a server error.",
      "defaultValue": true
    },
    {
      "name": "server.jetty.acceptors",
      "type": "java.lang.Integer",
      "description": "Number of acceptor threads to use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "name": "server.jetty.max-http-post-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP post or put content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "defaultValue": 0
    },
    {
      "name": "server.jetty.selectors",
      "type": "java.lang.Integer",
      "description": "Number of selector threads to use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "name": "server.jsp-servlet.class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.JspServlet"
    },
    {
      "name": "server.jsp-servlet.init-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "sourceType": "org.springframework.boot.context.embedded.JspServlet"
    },
    {
      "name": "server.jsp-servlet.registered",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.context.embedded.JspServlet"
    },
    {
      "name": "server.max-http-header-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP message header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0
    },
    {
      "name": "server.max-http-post-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP post content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0,
      "deprecated": true,
      "deprecation": {"reason": "Use dedicated property for each container."}
    },
    {
      "name": "server.port",
      "type": "java.lang.Integer",
      "description": "Server HTTP port.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.server-header",
      "type": "java.lang.String",
      "description": "Value to use for the Server response header (no header is sent if empty).",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "server.servlet-path",
      "type": "java.lang.String",
      "description": "Path of the main dispatcher servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": "/"
    },
    {
      "name": "server.session.cookie.comment",
      "type": "java.lang.String",
      "description": "Comment for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.domain",
      "type": "java.lang.String",
      "description": "Domain for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.http-only",
      "type": "java.lang.Boolean",
      "description": "\"HttpOnly\" flag for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.max-age",
      "type": "java.lang.Integer",
      "description": "Maximum age of the session cookie in seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.name",
      "type": "java.lang.String",
      "description": "Session cookie name.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.path",
      "type": "java.lang.String",
      "description": "Path of the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.cookie.secure",
      "type": "java.lang.Boolean",
      "description": "\"Secure\" flag for the session cookie.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "name": "server.session.persistent",
      "type": "java.lang.Boolean",
      "description": "Persist session data between restarts.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "defaultValue": false
    },
    {
      "name": "server.session.store-dir",
      "type": "java.io.File",
      "description": "Directory used to store session data.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session"
    },
    {
      "name": "server.session.timeout",
      "type": "java.lang.Integer",
      "description": "Session timeout in seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session"
    },
    {
      "name": "server.session.tracking-modes",
      "type": "java.util.Set<javax.servlet.SessionTrackingMode>",
      "description": "Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session"
    },
    {
      "name": "server.ssl.ciphers",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.client-auth",
      "type": "org.springframework.boot.context.embedded.Ssl$ClientAuth",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.enabled-protocols",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-alias",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.key-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.protocol",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store-password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store-provider",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.ssl.trust-store-type",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "name": "server.tomcat.accept-count",
      "type": "java.lang.Integer",
      "description": "Maximum queue length for incoming connection requests when all possible request\n processing threads are in use.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.accesslog.buffered",
      "type": "java.lang.Boolean",
      "description": "Buffer output such that it is only flushed periodically.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true
    },
    {
      "name": "server.tomcat.accesslog.directory",
      "type": "java.lang.String",
      "description": "Directory in which log files are created. Can be relative to the tomcat\n base dir or absolute.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "logs"
    },
    {
      "name": "server.tomcat.accesslog.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable access log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.pattern",
      "type": "java.lang.String",
      "description": "Format pattern for access logs.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "common"
    },
    {
      "name": "server.tomcat.accesslog.prefix",
      "type": "java.lang.String",
      "description": "Log file name prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "access_log"
    },
    {
      "name": "server.tomcat.accesslog.rename-on-rotate",
      "type": "java.lang.Boolean",
      "description": "Defer inclusion of the date stamp in the file name until rotate time.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.request-attributes-enabled",
      "type": "java.lang.Boolean",
      "description": "Set request attributes for IP address, Hostname, protocol and port used for\n the request.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false
    },
    {
      "name": "server.tomcat.accesslog.rotate",
      "type": "java.lang.Boolean",
      "description": "Enable access log rotation.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true
    },
    {
      "name": "server.tomcat.accesslog.suffix",
      "type": "java.lang.String",
      "description": "Log file name suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".log"
    },
    {
      "name": "server.tomcat.additional-tld-skip-patterns",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of additional patterns that match jars to ignore for TLD\n scanning. The special '?' and '*' characters can be used in the pattern to\n match one and only one character and zero or more characters respectively.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.background-processor-delay",
      "type": "java.lang.Integer",
      "description": "Delay in seconds between the invocation of backgroundProcess methods.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 30
    },
    {
      "name": "server.tomcat.basedir",
      "type": "java.io.File",
      "description": "Tomcat base directory. If not specified a temporary directory will be used.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.internal-proxies",
      "type": "java.lang.String",
      "description": "Regular expression that matches proxies that are to be trusted.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}"
    },
    {
      "name": "server.tomcat.max-connections",
      "type": "java.lang.Integer",
      "description": "Maximum number of connections that the server will accept and process at any\n given time. Once the limit has been reached, the operating system may still\n accept connections based on the \"acceptCount\" property.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.max-http-post-size",
      "type": "java.lang.Integer",
      "description": "Maximum size in bytes of the HTTP post content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.max-threads",
      "type": "java.lang.Integer",
      "description": "Maximum amount of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.min-spare-threads",
      "type": "java.lang.Integer",
      "description": "Minimum amount of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 0
    },
    {
      "name": "server.tomcat.port-header",
      "type": "java.lang.String",
      "description": "Name of the HTTP header used to override the original port value.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "X-Forwarded-Port"
    },
    {
      "name": "server.tomcat.protocol-header",
      "type": "java.lang.String",
      "description": "Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.protocol-header-https-value",
      "type": "java.lang.String",
      "description": "Value of the protocol header that indicates that the incoming request uses SSL.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "https"
    },
    {
      "name": "server.tomcat.redirect-context-root",
      "type": "java.lang.Boolean",
      "description": "Whether requests to the context root should be redirected by appending a / to\n the path.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.remote-ip-header",
      "type": "java.lang.String",
      "description": "Name of the http header from which the remote ip is extracted..",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.tomcat.uri-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Character encoding to use to decode the URI.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "name": "server.undertow.accesslog.dir",
      "type": "java.io.File",
      "description": "Undertow access log directory.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog"
    },
    {
      "name": "server.undertow.accesslog.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable access log.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog"
    },
    {
      "name": "server.undertow.accesslog.pattern",
      "type": "java.lang.String",
      "description": "Format pattern for access logs.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "common"
    },
    {
      "name": "server.undertow.accesslog.prefix",
      "type": "java.lang.String",
      "description": "Log file name prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "access_log."
    },
    {
      "name": "server.undertow.accesslog.rotate",
      "type": "java.lang.Boolean",
      "description": "Enable access log rotation.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": true
    },
    {
      "name": "server.undertow.accesslog.suffix",
      "type": "java.lang.String",
      "description": "Log file name suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "log"
    },
    {
      "name": "server.undertow.buffer-size",
      "type": "java.lang.Integer",
      "description": "Size of each buffer in bytes.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.buffers-per-region",
      "type": "java.lang.Integer",
      "description": "Number of buffer per region.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "deprecated": true,
      "deprecation": {"reason": "The property is not used by Undertow. See https://issues.jboss.org/browse/UNDERTOW-587 for details"}
    },
    {
      "name": "server.undertow.direct-buffers",
      "type": "java.lang.Boolean",
      "description": "Allocate buffers outside the Java heap.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.io-threads",
      "type": "java.lang.Integer",
      "description": "Number of I/O threads to create for the worker.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.undertow.max-http-post-size",
      "type": "java.lang.Long",
      "description": "Maximum size in bytes of the HTTP post content.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "defaultValue": 0
    },
    {
      "name": "server.undertow.worker-threads",
      "type": "java.lang.Integer",
      "description": "Number of worker threads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "name": "server.use-forward-headers",
      "type": "java.lang.Boolean",
      "description": "If X-Forwarded-* headers should be applied to the HttpRequest.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "name": "spring.activemq.broker-url",
      "type": "java.lang.String",
      "description": "URL of the ActiveMQ broker. Auto-generated by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.in-memory",
      "type": "java.lang.Boolean",
      "description": "Specify if the default broker URL should be in memory. Ignored if an explicit\n broker has been specified.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": true
    },
    {
      "name": "spring.activemq.packages.trust-all",
      "type": "java.lang.Boolean",
      "description": "Trust all packages.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "name": "spring.activemq.packages.trusted",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of specific packages to trust (when not trusting all\n packages).",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "name": "spring.activemq.password",
      "type": "java.lang.String",
      "description": "Login password of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.activemq.pool.configuration.block-if-session-pool-is-full",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.block-if-session-pool-is-full-timeout",
      "type": "java.lang.Long",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.connection-factory",
      "type": "java.lang.Object",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.create-connection-on-startup",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.expiry-timeout",
      "type": "java.lang.Long",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.idle-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.max-connections",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.maximum-active-session-per-connection",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.properties",
      "type": "java.util.Properties",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.reconnect-on-exception",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.time-between-expiration-check-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.configuration.use-anonymous-producers",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "name": "spring.activemq.pool.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether a PooledConnectionFactory should be created instead of a regular\n ConnectionFactory.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": false
    },
    {
      "name": "spring.activemq.pool.expiry-timeout",
      "type": "java.lang.Long",
      "description": "Connection expiration timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 0
    },
    {
      "name": "spring.activemq.pool.idle-timeout",
      "type": "java.lang.Integer",
      "description": "Connection idle timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 30000
    },
    {
      "name": "spring.activemq.pool.max-connections",
      "type": "java.lang.Integer",
      "description": "Maximum number of pooled connections.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 1
    },
    {
      "name": "spring.activemq.user",
      "type": "java.lang.String",
      "description": "Login user of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "name": "spring.aop.auto",
      "type": "java.lang.Boolean",
      "description": "Add @EnableAspectJAutoProxy.",
      "defaultValue": true
    },
    {
      "name": "spring.aop.proxy-target-class",
      "type": "java.lang.Boolean",
      "description": "Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).",
      "defaultValue": false
    },
    {
      "name": "spring.application.admin.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable admin features for the application.",
      "defaultValue": false
    },
    {
      "name": "spring.application.admin.jmx-name",
      "type": "java.lang.String",
      "description": "JMX name of the application admin MBean.",
      "defaultValue": "org.springframework.boot:type=Admin,name=SpringApplication"
    },
    {
      "name": "spring.application.index",
      "type": "java.lang.Integer",
      "description": "Application index.",
      "sourceType": "org.springframework.boot.context.ContextIdApplicationContextInitializer"
    },
    {
      "name": "spring.application.name",
      "type": "java.lang.String",
      "description": "Application name.",
      "sourceType": "org.springframework.boot.context.ContextIdApplicationContextInitializer"
    },
    {
      "name": "spring.artemis.embedded.cluster-password",
      "type": "java.lang.String",
      "description": "Cluster password. Randomly generated on startup by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "name": "spring.artemis.embedded.data-directory",
      "type": "java.lang.String",
      "description": "Journal file directory. Not necessary if persistence is turned off.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "name": "spring.artemis.embedded.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable embedded mode if the Artemis server APIs are available.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": true
    },
    {
      "name": "spring.artemis.embedded.persistent",
      "type": "java.lang.Boolean",
      "description": "Enable persistent store.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": false
    },
    {
      "name": "spring.artemis.embedded.queues",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of queues to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.artemis.embedded.server-id",
      "type": "java.lang.Integer",
      "description": "Server id. By default, an auto-incremented counter is used.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": 0
    },
    {
      "name": "spring.artemis.embedded.topics",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of topics to create on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": []
    },
    {
      "name": "spring.artemis.host",
      "type": "java.lang.String",
      "description": "Artemis broker host.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.artemis.mode",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode",
      "description": "Artemis deployment mode, auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.password",
      "type": "java.lang.String",
      "description": "Login password of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.artemis.port",
      "type": "java.lang.Integer",
      "description": "Artemis broker port.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": 61616
    },
    {
      "name": "spring.artemis.user",
      "type": "java.lang.String",
      "description": "Login user of the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "name": "spring.autoconfigure.exclude",
      "type": "java.util.List<java.lang.Class>",
      "description": "Auto-configuration classes to exclude."
    },
    {
      "name": "spring.batch.initializer.enabled",
      "type": "java.lang.Boolean",
      "description": "Create the required batch tables on startup if necessary. Enabled automatically\n if no custom table prefix is set or if a custom schema is configured.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Initializer"
    },
    {
      "name": "spring.batch.job.enabled",
      "type": "java.lang.Boolean",
      "description": "Execute all Spring Batch jobs in the context on startup.",
      "defaultValue": true
    },
    {
      "name": "spring.batch.job.names",
      "type": "java.lang.String",
      "description": "Comma-separated list of job names to execute on startup. By default, all Jobs\n found in the context are executed.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "defaultValue": ""
    },
    {
      "name": "spring.batch.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "defaultValue": "classpath:org/springframework/batch/core/schema-@@platform@@.sql"
    },
    {
      "name": "spring.batch.table-prefix",
      "type": "java.lang.String",
      "description": "Table prefix for all the batch meta-data tables.",
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "name": "spring.beaninfo.ignore",
      "type": "java.lang.Boolean",
      "description": "Skip search of BeanInfo classes.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener",
      "defaultValue": true
    },
    {
      "name": "spring.cache.cache-names",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of cache names to create if supported by the underlying cache\n manager. Usually, this disables the ability to create additional caches on-the-fly.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cache.caffeine.spec",
      "type": "java.lang.String",
      "description": "The spec to use to create caches. Check CaffeineSpec for more details on the\n spec format.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine"
    },
    {
      "name": "spring.cache.couchbase.expiration",
      "type": "java.lang.Integer",
      "description": "Entry expiration in milliseconds. By default the entries never expire. Note\n that this value is ultimately converted to seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase",
      "defaultValue": 0
    },
    {
      "name": "spring.cache.ehcache.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize EhCache.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache"
    },
    {
      "name": "spring.cache.guava.spec",
      "type": "java.lang.String",
      "description": "The spec to use to create caches. Check CacheBuilderSpec for more details on\n the spec format.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Guava",
      "deprecated": true,
      "deprecation": {
        "reason": "Caffeine will supersede the Guava support in Spring Boot 2.0",
        "replacement": "spring.cache.caffeine.spec"
      }
    },
    {
      "name": "spring.cache.hazelcast.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Hazelcast",
      "deprecated": true,
      "deprecation": {
        "reason": "Use general hazelcast auto-configuration instead.",
        "replacement": "spring.hazelcast.config"
      }
    },
    {
      "name": "spring.cache.infinispan.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Infinispan.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan"
    },
    {
      "name": "spring.cache.jcache.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize the cache manager.\n The configuration file is dependent of the underlying cache implementation.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "name": "spring.cache.jcache.provider",
      "type": "java.lang.String",
      "description": "Fully qualified name of the CachingProvider implementation to use to retrieve\n the JSR-107 compliant cache manager. Only needed if more than one JSR-107\n implementation is available on the classpath.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "name": "spring.cache.type",
      "type": "org.springframework.boot.autoconfigure.cache.CacheType",
      "description": "Cache type, auto-detected according to the environment by default.",
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "name": "spring.cloud.config.allow-override",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that {@link #isSystemPropertiesOverride()\n systemPropertiesOverride} can be used. Set to false to prevent users from changing\n the default accidentally. Default true.",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.config.authorization",
      "type": "java.lang.String",
      "description": "Authorization token used by the client to connect to the server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "deprecated": true,
      "deprecation": {
        "reason": "replaced by headers",
        "replacement": "headers"
      }
    },
    {
      "name": "spring.cloud.config.discovery.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that config server discovery is enabled (config server URL will be\n looked up via discovery).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties$Discovery",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.config.discovery.service-id",
      "type": "java.lang.String",
      "description": "Service id to locate config server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties$Discovery",
      "defaultValue": "configserver"
    },
    {
      "name": "spring.cloud.config.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to say that remote configuration is enabled. Default true;",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.config.fail-fast",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that failure to connect to the server is fatal (default false).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.config.headers",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional headers used to create the client request.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.label",
      "type": "java.lang.String",
      "description": "The label name to use to pull remote configuration properties. The default is set\n on the server (generally \"master\" for a git based server).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.name",
      "type": "java.lang.String",
      "description": "Name of application used to fetch remote properties.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.override-none",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that when {@link #setAllowOverride(boolean) allowOverride} is\n true, external properties should take lowest priority, and not override any\n existing property sources (including local config files). Default false.",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.config.override-system-properties",
      "type": "java.lang.Boolean",
      "description": "Flag to indicate that the external properties should override system properties.\n Default true.",
      "sourceType": "org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.config.password",
      "type": "java.lang.String",
      "description": "The password to use (HTTP Basic) when contacting the remote server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.profile",
      "type": "java.lang.String",
      "description": "The default profile to use when fetching remote configuration (comma-separated).\n Default is \"default\".",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": "default"
    },
    {
      "name": "spring.cloud.config.retry.initial-interval",
      "type": "java.lang.Long",
      "description": "Initial retry interval in milliseconds.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 1000
    },
    {
      "name": "spring.cloud.config.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 6
    },
    {
      "name": "spring.cloud.config.retry.max-interval",
      "type": "java.lang.Long",
      "description": "Maximum interval for backoff.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 2000
    },
    {
      "name": "spring.cloud.config.retry.multiplier",
      "type": "java.lang.Double",
      "description": "Multiplier for next interval.",
      "sourceType": "org.springframework.cloud.config.client.RetryProperties",
      "defaultValue": 1.1
    },
    {
      "name": "spring.cloud.config.token",
      "type": "java.lang.String",
      "description": "Security Token passed thru to underlying environment repository.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.config.uri",
      "type": "java.lang.String",
      "description": "The URI of the remote server (default http://localhost:8888).",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties",
      "defaultValue": "http://localhost:8888"
    },
    {
      "name": "spring.cloud.config.username",
      "type": "java.lang.String",
      "description": "The username to use (HTTP Basic) when contacting the remote server.",
      "sourceType": "org.springframework.cloud.config.client.ConfigClientProperties"
    },
    {
      "name": "spring.cloud.discovery.client.simple.instances",
      "type": "java.util.Map<java.lang.String,java.util.List<org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties.SimpleServiceInstance>>",
      "sourceType": "org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties"
    },
    {
      "name": "spring.cloud.hypermedia.refresh.fixed-delay",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties$Refresh",
      "defaultValue": 5000
    },
    {
      "name": "spring.cloud.hypermedia.refresh.initial-delay",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.cloud.client.hypermedia.CloudHypermediaAutoConfiguration$CloudHypermediaProperties$Refresh",
      "defaultValue": 10000
    },
    {
      "name": "spring.cloud.inetutils.default-hostname",
      "type": "java.lang.String",
      "description": "The default hostname. Used in case of errors.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.cloud.inetutils.default-ip-address",
      "type": "java.lang.String",
      "description": "The default ipaddress. Used in case of errors.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": "127.0.0.1"
    },
    {
      "name": "spring.cloud.inetutils.ignored-interfaces",
      "type": "java.util.List<java.lang.String>",
      "description": "List of Java regex expressions for network interfaces that will be ignored.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties"
    },
    {
      "name": "spring.cloud.inetutils.preferred-networks",
      "type": "java.util.List<java.lang.String>",
      "description": "List of Java regex expressions for network addresses that will be preferred.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties"
    },
    {
      "name": "spring.cloud.inetutils.timeout-seconds",
      "type": "java.lang.Integer",
      "description": "Timeout in seconds for calculating hostname.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.cloud.inetutils.use-only-site-local-interfaces",
      "type": "java.lang.Boolean",
      "description": "Use only interfaces with site local addresses. See {@link InetAddress#isSiteLocalAddress()} for more details.",
      "sourceType": "org.springframework.cloud.commons.util.InetUtilsProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.loadbalancer.retry.enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties",
      "defaultValue": true
    },
    {
      "name": "spring.cloud.service-registry.auto-registration.fail-fast",
      "type": "java.lang.Boolean",
      "description": "Should startup fail if there is no AutoServiceRegistration, default to false.",
      "sourceType": "org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties",
      "defaultValue": false
    },
    {
      "name": "spring.cloud.stream.binders",
      "type": "java.util.Map<java.lang.String,org.springframework.cloud.stream.config.BinderProperties>",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.bindings",
      "type": "java.util.Map<java.lang.String,org.springframework.cloud.stream.config.BindingProperties>",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.default-binder",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties"
    },
    {
      "name": "spring.cloud.stream.dynamic-destinations",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": []
    },
    {
      "name": "spring.cloud.stream.instance-count",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.cloud.stream.instance-index",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.cloud.stream.config.BindingServiceProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.cloud.stream.metrics.export-properties",
      "type": "java.util.Map<java.lang.String,java.lang.Object>",
      "description": "List of properties that are going to be appended to each message. This gets\n populate by onApplicationEvent, once the context refreshes to avoid overhead of\n doing per message basis.",
      "sourceType": "org.springframework.cloud.stream.metrics.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.key",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.stream.metrics.ApplicationMetricsProperties"
    },
    {
      "name": "spring.cloud.stream.metrics.prefix",
      "type": "java.lang.String",
      "sourceType": "org.springframework.cloud.stream.metrics.ApplicationMetricsProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.cloud.stream.metrics.properties",
      "type": "java.lang.String[]",
      "sourceType": "org.springframework.cloud.stream.metrics.ApplicationMetricsProperties"
    },
    {
      "name": "spring.config.location",
      "type": "java.lang.String",
      "description": "Config file locations.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener"
    },
    {
      "name": "spring.config.name",
      "type": "java.lang.String",
      "description": "Config file name.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener",
      "defaultValue": "application"
    },
    {
      "name": "spring.couchbase.bootstrap-hosts",
      "type": "java.util.List<java.lang.String>",
      "description": "Couchbase nodes (host or IP address) to bootstrap from.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "name": "spring.couchbase.bucket.name",
      "type": "java.lang.String",
      "description": "Name of the bucket to connect to.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": "default"
    },
    {
      "name": "spring.couchbase.bucket.password",
      "type": "java.lang.String",
      "description": "Password of the bucket.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": ""
    },
    {
      "name": "spring.couchbase.env.endpoints.key-value",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the key/value service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.query",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the query (N1QL) service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.endpoints.view",
      "type": "java.lang.Integer",
      "description": "Number of sockets per node against the view service.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1
    },
    {
      "name": "spring.couchbase.env.ssl.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable SSL support. Enabled automatically if a \"keyStore\" is provided unless\n specified otherwise.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.ssl.key-store",
      "type": "java.lang.String",
      "description": "Path to the JVM key store that holds the certificates.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.ssl.key-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "name": "spring.couchbase.env.timeouts.connect",
      "type": "java.lang.Long",
      "description": "Bucket connections timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 5000
    },
    {
      "name": "spring.couchbase.env.timeouts.key-value",
      "type": "java.lang.Long",
      "description": "Blocking operations performed on a specific key timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 2500
    },
    {
      "name": "spring.couchbase.env.timeouts.query",
      "type": "java.lang.Long",
      "description": "N1QL query operations timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 7500
    },
    {
      "name": "spring.couchbase.env.timeouts.socket-connect",
      "type": "java.lang.Integer",
      "description": "Socket connect connections timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 1000
    },
    {
      "name": "spring.couchbase.env.timeouts.view",
      "type": "java.lang.Long",
      "description": "Regular and geospatial view operations timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 7500
    },
    {
      "name": "spring.dao.exceptiontranslation.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the PersistenceExceptionTranslationPostProcessor.",
      "defaultValue": true
    },
    {
      "name": "spring.data.cassandra.cluster-name",
      "type": "java.lang.String",
      "description": "Name of the Cassandra cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.compression",
      "type": "com.datastax.driver.core.ProtocolOptions$Compression",
      "description": "Compression supported by the Cassandra binary protocol.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none"
    },
    {
      "name": "spring.data.cassandra.connect-timeout-millis",
      "type": "java.lang.Integer",
      "description": "Socket option: connection time out.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.consistency-level",
      "type": "com.datastax.driver.core.ConsistencyLevel",
      "description": "Queries consistency level.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.contact-points",
      "type": "java.lang.String",
      "description": "Comma-separated list of cluster node addresses.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.data.cassandra.fetch-size",
      "type": "java.lang.Integer",
      "description": "Queries default fetch size.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.keyspace-name",
      "type": "java.lang.String",
      "description": "Keyspace name to use.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.load-balancing-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.LoadBalancingPolicy>",
      "description": "Class name of the load balancing policy.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.password",
      "type": "java.lang.String",
      "description": "Login password of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.port",
      "type": "java.lang.Integer",
      "description": "Port of the Cassandra server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.read-timeout-millis",
      "type": "java.lang.Integer",
      "description": "Socket option: read time out.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.reconnection-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.ReconnectionPolicy>",
      "description": "Reconnection policy class.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.retry-policy",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.RetryPolicy>",
      "description": "Class name of the retry policy.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "type": "java.lang.String",
      "description": "Schema action to take at startup.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none"
    },
    {
      "name": "spring.data.cassandra.serial-consistency-level",
      "type": "com.datastax.driver.core.ConsistencyLevel",
      "description": "Queries serial consistency level.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.cassandra.ssl",
      "type": "java.lang.Boolean",
      "description": "Enable SSL support.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": false
    },
    {
      "name": "spring.data.cassandra.username",
      "type": "java.lang.String",
      "description": "Login user of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "name": "spring.data.couchbase.auto-index",
      "type": "java.lang.Boolean",
      "description": "Automatically create views and indexes. Use the meta-data provided by\n \"@ViewIndexed\", \"@N1qlPrimaryIndexed\" and \"@N1qlSecondaryIndexed\".",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": false
    },
    {
      "name": "spring.data.couchbase.consistency",
      "type": "org.springframework.data.couchbase.core.query.Consistency",
      "description": "Consistency to apply by default on generated queries.",
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": "read-your-own-writes"
    },
    {
      "name": "spring.data.couchbase.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Couchbase repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.elasticsearch.cluster-name",
      "type": "java.lang.String",
      "description": "Elasticsearch cluster name.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "defaultValue": "elasticsearch"
    },
    {
      "name": "spring.data.elasticsearch.cluster-nodes",
      "type": "java.lang.String",
      "description": "Comma-separated list of cluster node addresses. If not specified, starts a client\n node.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.elasticsearch.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional properties used to configure the client.",
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "name": "spring.data.elasticsearch.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Elasticsearch repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.jpa.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JPA repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.ldap.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable LDAP repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.mongodb.authentication-database",
      "type": "java.lang.String",
      "description": "Authentication database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.database",
      "type": "java.lang.String",
      "description": "Database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "type": "java.lang.Class<?>",
      "description": "Fully qualified name of the FieldNamingStrategy to use.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.grid-fs-database",
      "type": "java.lang.String",
      "description": "GridFS database name.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.host",
      "type": "java.lang.String",
      "description": "Mongo server host. Cannot be set with uri.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.password",
      "type": "char[]",
      "description": "Login password of the mongo server. Cannot be set with uri.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.port",
      "type": "java.lang.Integer",
      "description": "Mongo server port. Cannot be set with uri.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Mongo repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.mongodb.uri",
      "type": "java.lang.String",
      "description": "Mongo database URI. Cannot be set with host, port and credentials.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.mongodb.username",
      "type": "java.lang.String",
      "description": "Login user of the mongo server. Cannot be set with uri.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "name": "spring.data.neo4j.compiler",
      "type": "java.lang.String",
      "description": "Compiler to use.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.embedded.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable embedded mode if the embedded driver is available.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "defaultValue": true
    },
    {
      "name": "spring.data.neo4j.open-in-view",
      "type": "java.lang.Boolean",
      "description": "Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.",
      "defaultValue": false
    },
    {
      "name": "spring.data.neo4j.password",
      "type": "java.lang.String",
      "description": "Login password of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Neo4j repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.neo4j.uri",
      "type": "java.lang.String",
      "description": "URI used by the driver. Auto-detected by default.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.neo4j.username",
      "type": "java.lang.String",
      "description": "Login user of the server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "name": "spring.data.redis.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Redis repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.rest.base-path",
      "type": "java.lang.String",
      "description": "Base path to be used by Spring Data REST to expose repository resources.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.default-page-size",
      "type": "java.lang.Integer",
      "description": "Default size of pages.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.detection-strategy",
      "type": "org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy$RepositoryDetectionStrategies",
      "description": "Strategy to use to determine which repositories get exposed.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "defaultValue": "default"
    },
    {
      "name": "spring.data.rest.enable-enum-translation",
      "type": "java.lang.Boolean",
      "description": "Enable enum value translation via the Spring Data REST default resource bundle.\n Will use the fully qualified enum name as key.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.limit-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates how many results to return at\n once.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.max-page-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of pages.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.page-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates what page to return.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.return-body-on-create",
      "type": "java.lang.Boolean",
      "description": "Return a response body after creating an entity.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.return-body-on-update",
      "type": "java.lang.Boolean",
      "description": "Return a response body after updating an entity.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.rest.sort-param-name",
      "type": "java.lang.String",
      "description": "Name of the URL query string parameter that indicates what direction to sort\n results.",
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "name": "spring.data.solr.host",
      "type": "java.lang.String",
      "description": "Solr host. Ignored if \"zk-host\" is set.",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "defaultValue": "http://127.0.0.1:8983/solr"
    },
    {
      "name": "spring.data.solr.repositories.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Solr repositories.",
      "defaultValue": true
    },
    {
      "name": "spring.data.solr.zk-host",
      "type": "java.lang.String",
      "description": "ZooKeeper host address in the form HOST:PORT.",
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "name": "spring.datasource.continue-on-error",
      "type": "java.lang.Boolean",
      "description": "Do not stop if an error occurs while initializing the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.data",
      "type": "java.util.List<java.lang.String>",
      "description": "Data (DML) script resource references.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.data-password",
      "type": "java.lang.String",
      "description": "Password of the database to execute DML scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.data-username",
      "type": "java.lang.String",
      "description": "User of the database to execute DML scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.dbcp.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.connection-init-sqls",
      "type": "java.util.Collection",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.max-active",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.max-open-prepared-statements",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.max-wait",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.pool-prepared-statements",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.remove-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.time-between-eviction-runs-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.dbcp2.abandoned-usage-tracking",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.cache-state",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.connection-init-sqls",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.disconnection-sql-codes",
      "type": "java.util.Set<java.lang.String>",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.driver",
      "type": "java.sql.Driver",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.enable-auto-commit-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.eviction-policy-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.fast-fail-validation",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.jmx-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.lifo",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.log-expired-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-conn-lifetime-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-open-prepared-statements",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-total",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.max-wait-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.pool-prepared-statements",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-on-maintenance",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.rollback-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.soft-min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-create",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.time-between-eviction-runs-millis",
      "type": "java.lang.Long",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.dbcp2.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "name": "spring.datasource.driver-class-name",
      "type": "java.lang.String",
      "description": "Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.generate-unique-name",
      "type": "java.lang.Boolean",
      "description": "Generate a random datasource name.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.hikari.allow-pool-suspension",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.catalog",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-customizer-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.hikari.connection-init-sql",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-test-query",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.connection-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-j-n-d-i",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.data-source-properties",
      "type": "java.util.Properties",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.health-check-properties",
      "type": "java.util.Properties",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.health-check-registry",
      "type": "java.lang.Object",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.idle-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.initialization-fail-fast",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.isolate-internal-queries",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.jdbc-url",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.jdbc4-connection-test",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "deprecation": {}
    },
    {
      "name": "spring.datasource.hikari.leak-detection-threshold",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.max-lifetime",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.maximum-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.metric-registry",
      "type": "java.lang.Object",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.minimum-idle",
      "type": "java.lang.Integer",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.password",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.pool-name",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.read-only",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.register-mbeans",
      "type": "java.lang.Boolean",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.transaction-isolation",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.username",
      "type": "java.lang.String",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.hikari.validation-timeout",
      "type": "java.lang.Long",
      "sourceType": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "name": "spring.datasource.initialize",
      "type": "java.lang.Boolean",
      "description": "Populate the database using 'data.sql'.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": true
    },
    {
      "name": "spring.datasource.jmx-enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JMX support (if provided by the underlying pool).",
      "defaultValue": false
    },
    {
      "name": "spring.datasource.jndi-name",
      "type": "java.lang.String",
      "description": "JNDI location of the datasource. Class, url, username & password are ignored when\n set.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.name",
      "type": "java.lang.String",
      "description": "Name of the datasource.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "testdb"
    },
    {
      "name": "spring.datasource.password",
      "type": "java.lang.String",
      "description": "Login password of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.platform",
      "type": "java.lang.String",
      "description": "Platform to use in the schema resource (schema-${platform}.sql).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "all"
    },
    {
      "name": "spring.datasource.schema",
      "type": "java.util.List<java.lang.String>",
      "description": "Schema (DDL) script resource references.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.schema-password",
      "type": "java.lang.String",
      "description": "Password of the database to execute DDL scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.schema-username",
      "type": "java.lang.String",
      "description": "User of the database to execute DDL scripts (if different).",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.separator",
      "type": "java.lang.String",
      "description": "Statement separator in SQL initialization scripts.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": ";"
    },
    {
      "name": "spring.datasource.sql-script-encoding",
      "type": "java.nio.charset.Charset",
      "description": "SQL scripts encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.tomcat.abandon-when-percentage-full",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.alternate-username-allowed",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.commit-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.connection-properties",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.data-source",
      "type": "java.lang.Object",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.data-source-j-n-d-i",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.db-properties",
      "type": "java.util.Properties",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-auto-commit",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-catalog",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-read-only",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.default-transaction-isolation",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.driver-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.fair-queue",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.ignore-exception-on-pre-load",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.init-s-q-l",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.initial-size",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.jdbc-interceptors",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.jmx-enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.log-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.log-validation-errors",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-active",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-age",
      "type": "java.lang.Long",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.max-wait",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.min-evictable-idle-time-millis",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.min-idle",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.password",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.propagate-interrupt-state",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.remove-abandoned",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.rollback-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.suspect-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-borrow",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-connect",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-on-return",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.time-between-eviction-runs-millis",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.url",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-disposable-connection-facade",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-equals",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.use-lock",
      "type": "java.lang.Boolean",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.username",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-interval",
      "type": "java.lang.Long",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-query",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validation-query-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.tomcat.validator-class-name",
      "type": "java.lang.String",
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "name": "spring.datasource.type",
      "type": "java.lang.Class<? extends javax.sql.DataSource>",
      "description": "Fully qualified name of the connection pool implementation to use. By default, it\n is auto-detected from the classpath.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.url",
      "type": "java.lang.String",
      "description": "JDBC url of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.username",
      "type": "java.lang.String",
      "description": "Login user of the database.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "type": "java.lang.String",
      "description": "XA datasource fully qualified name.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "name": "spring.datasource.xa.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Properties to pass to the XA data source.",
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "name": "spring.elasticsearch.jest.connection-timeout",
      "type": "java.lang.Integer",
      "description": "Connection timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": 3000
    },
    {
      "name": "spring.elasticsearch.jest.multi-threaded",
      "type": "java.lang.Boolean",
      "description": "Enable connection requests from multiple execution threads.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": true
    },
    {
      "name": "spring.elasticsearch.jest.password",
      "type": "java.lang.String",
      "description": "Login password.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.elasticsearch.jest.proxy.host",
      "type": "java.lang.String",
      "description": "Proxy host the HTTP client should use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "name": "spring.elasticsearch.jest.proxy.port",
      "type": "java.lang.Integer",
      "description": "Proxy port the HTTP client should use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "name": "spring.elasticsearch.jest.read-timeout",
      "type": "java.lang.Integer",
      "description": "Read timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": 3000
    },
    {
      "name": "spring.elasticsearch.jest.uris",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of the Elasticsearch instances to use.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": ["http://localhost:9200"]
    },
    {
      "name": "spring.elasticsearch.jest.username",
      "type": "java.lang.String",
      "description": "Login user.",
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "name": "spring.freemarker.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.freemarker.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.freemarker.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all request attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all HttpSession attributes should be added to the model prior to\n merging with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false
    },
    {
      "name": "spring.freemarker.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.prefer-file-system-access",
      "type": "java.lang.Boolean",
      "description": "Prefer file system access for template loading. File system access enables hot\n detection of template changes.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true
    },
    {
      "name": "spring.freemarker.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.settings",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.freemarker.template-loader-path",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of template paths.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": ["classpath:/templates/"]
    },
    {
      "name": "spring.freemarker.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "name": "spring.git.properties",
      "type": "java.lang.String",
      "description": "Resource reference to a generated git info properties file.",
      "deprecated": true,
      "deprecation": {"replacement": "spring.info.git.location"}
    },
    {
      "name": "spring.groovy.template.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.groovy.template.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true
    },
    {
      "name": "spring.groovy.template.configuration.auto-escape",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-indent",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-indent-string",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.auto-new-line",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.base-template-class",
      "type": "java.lang.Class<? extends groovy.text.markup.BaseTemplate>",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.cache-templates",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.declaration-encoding",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.expand-empty-elements",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.locale",
      "type": "java.util.Locale",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.new-line-string",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.resource-loader-path",
      "type": "java.lang.String",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.configuration.use-double-quotes",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "name": "spring.groovy.template.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.groovy.template.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true
    },
    {
      "name": "spring.groovy.template.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all request attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all HttpSession attributes should be added to the model prior to\n merging with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false
    },
    {
      "name": "spring.groovy.template.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true
    },
    {
      "name": "spring.groovy.template.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.resource-loader-path",
      "type": "java.lang.String",
      "description": "Template path.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.groovy.template.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.groovy.template.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "name": "spring.h2.console.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the console.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": false
    },
    {
      "name": "spring.h2.console.path",
      "type": "java.lang.String",
      "description": "Path at which the console will be available.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": "/h2-console"
    },
    {
      "name": "spring.h2.console.settings.trace",
      "type": "java.lang.Boolean",
      "description": "Enable trace output.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false
    },
    {
      "name": "spring.h2.console.settings.web-allow-others",
      "type": "java.lang.Boolean",
      "description": "Enable remote access.",
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false
    },
    {
      "name": "spring.hateoas.use-hal-as-default-json-media-type",
      "type": "java.lang.Boolean",
      "description": "Specify if application/hal+json responses should be sent to requests that accept\n application/json.",
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "defaultValue": true
    },
    {
      "name": "spring.hazelcast.config",
      "type": "org.springframework.core.io.Resource",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "type": "java.lang.String",
      "description": "Preferred JSON mapper to use for HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and Jackson are on the classpath."
    },
    {
      "name": "spring.http.encoding.charset",
      "type": "java.nio.charset.Charset",
      "description": "Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not\n set explicitly.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.http.encoding.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable http encoding support.",
      "defaultValue": true
    },
    {
      "name": "spring.http.encoding.force",
      "type": "java.lang.Boolean",
      "description": "Force the encoding to the configured charset on HTTP requests and responses.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.force-request",
      "type": "java.lang.Boolean",
      "description": "Force the encoding to the configured charset on HTTP requests. Defaults to true\n when \"force\" has not been specified.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.force-response",
      "type": "java.lang.Boolean",
      "description": "Force the encoding to the configured charset on HTTP responses.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.encoding.mapping",
      "type": "java.util.Map<java.util.Locale,java.nio.charset.Charset>",
      "description": "Locale to Encoding mapping.",
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "name": "spring.http.multipart.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable support of multi-part uploads.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": true
    },
    {
      "name": "spring.http.multipart.file-size-threshold",
      "type": "java.lang.String",
      "description": "Threshold after which files will be written to disk. Values can use the suffixed\n \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "0"
    },
    {
      "name": "spring.http.multipart.location",
      "type": "java.lang.String",
      "description": "Intermediate location of uploaded files.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties"
    },
    {
      "name": "spring.http.multipart.max-file-size",
      "type": "java.lang.String",
      "description": "Max file size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or\n Kilobyte size.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "1MB"
    },
    {
      "name": "spring.http.multipart.max-request-size",
      "type": "java.lang.String",
      "description": "Max request size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte\n or Kilobyte size.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "10MB"
    },
    {
      "name": "spring.http.multipart.resolve-lazily",
      "type": "java.lang.Boolean",
      "description": "Whether to resolve the multipart request lazily at the time of file or parameter\n access.",
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": false
    },
    {
      "name": "spring.info.build.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the generated build-info.properties file.",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build"
    },
    {
      "name": "spring.info.git.location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the generated git.properties file.",
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git"
    },
    {
      "name": "spring.integration.poller.fixed-delay",
      "type": "java.lang.Long",
      "description": "Fixed delay for default poller.",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "defaultValue": 1000
    },
    {
      "name": "spring.integration.poller.max-messages-per-poll",
      "type": "java.lang.Long",
      "description": "Maximum messages per poll for the default poller.",
      "sourceType": "org.springframework.cloud.stream.config.DefaultPollerProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.jackson.date-format",
      "type": "java.lang.String",
      "description": "Date format string (yyyy-MM-dd HH:mm:ss), or a fully-qualified date format class\n name.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.default-property-inclusion",
      "type": "com.fasterxml.jackson.annotation.JsonInclude$Include",
      "description": "Controls the inclusion of properties during serialization. Configured with one of\n the values in Jackson's JsonInclude.Include enumeration.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.deserialization",
      "type": "java.util.Map<com.fasterxml.jackson.databind.DeserializationFeature,java.lang.Boolean>",
      "description": "Jackson on/off features that affect the way Java objects are deserialized.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.generator",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonGenerator.Feature,java.lang.Boolean>",
      "description": "Jackson on/off features for generators.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.joda-date-time-format",
      "type": "java.lang.String",
      "description": "Joda date time format string (yyyy-MM-dd HH:mm:ss). If not configured,\n \"date-format\" will be used as a fallback if it is configured with a format string.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.locale",
      "type": "java.util.Locale",
      "description": "Locale used for formatting.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.mapper",
      "type": "java.util.Map<com.fasterxml.jackson.databind.MapperFeature,java.lang.Boolean>",
      "description": "Jackson general purpose on/off features.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.parser",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonParser.Feature,java.lang.Boolean>",
      "description": "Jackson on/off features for parsers.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.property-naming-strategy",
      "type": "java.lang.String",
      "description": "One of the constants on Jackson's PropertyNamingStrategy\n (CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES). Can also be a fully-qualified class\n name of a PropertyNamingStrategy subclass.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.serialization",
      "type": "java.util.Map<com.fasterxml.jackson.databind.SerializationFeature,java.lang.Boolean>",
      "description": "Jackson on/off features that affect the way Java objects are serialized.",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jackson.time-zone",
      "type": "java.util.TimeZone",
      "description": "Time zone used when formatting dates. Configured using any recognized time zone\n identifier, for example \"America/Los_Angeles\" or \"GMT+10\".",
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "name": "spring.jersey.application-path",
      "type": "java.lang.String",
      "description": "Path that serves as the base URI for the application. Overrides the value of\n \"@ApplicationPath\" if specified.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.filter.order",
      "type": "java.lang.Integer",
      "description": "Jersey filter chain order.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "defaultValue": 0
    },
    {
      "name": "spring.jersey.init",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Init parameters to pass to Jersey via the servlet or filter.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "name": "spring.jersey.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the Jersey servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "spring.jersey.type",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Type",
      "description": "Jersey integration type.",
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "defaultValue": "servlet"
    },
    {
      "name": "spring.jms.jndi-name",
      "type": "java.lang.String",
      "description": "Connection factory JNDI name. When set, takes precedence to others connection\n factory auto-configurations.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "name": "spring.jms.listener.acknowledge-mode",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$AcknowledgeMode",
      "description": "Acknowledge mode of the container. By default, the listener is transacted with\n automatic acknowledgment.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.listener.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Start the container automatically on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "defaultValue": true
    },
    {
      "name": "spring.jms.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Minimum number of concurrent consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.listener.max-concurrency",
      "type": "java.lang.Integer",
      "description": "Maximum number of concurrent consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "name": "spring.jms.pub-sub-domain",
      "type": "java.lang.Boolean",
      "description": "Specify if the default destination type is topic.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jms.template.default-destination",
      "type": "java.lang.String",
      "description": "Default destination to use on send/receive operations that do not have a\n destination parameter.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.delivery-delay",
      "type": "java.lang.Long",
      "description": "Delivery delay to use for send calls in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.delivery-mode",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$DeliveryMode",
      "description": "Delivery mode. Enable QoS when set.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.priority",
      "type": "java.lang.Integer",
      "description": "Priority of a message when sending. Enable QoS when set.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.qos-enabled",
      "type": "java.lang.Boolean",
      "description": "Enable explicit QoS when sending a message. When enabled, the delivery mode,\n priority and time-to-live properties will be used when sending a message. QoS\n is automatically enabled when at least one of those settings is customized.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.receive-timeout",
      "type": "java.lang.Long",
      "description": "Timeout to use for receive calls in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jms.template.time-to-live",
      "type": "java.lang.Long",
      "description": "Time-to-live of a message when sending in milliseconds. Enable QoS when set.",
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "name": "spring.jmx.default-domain",
      "type": "java.lang.String",
      "description": "JMX domain name."
    },
    {
      "name": "spring.jmx.enabled",
      "type": "java.lang.Boolean",
      "description": "Expose management beans to the JMX domain.",
      "defaultValue": true
    },
    {
      "name": "spring.jmx.server",
      "type": "java.lang.String",
      "description": "MBeanServer bean name.",
      "defaultValue": "mbeanServer"
    },
    {
      "name": "spring.jooq.sql-dialect",
      "type": "org.jooq.SQLDialect",
      "description": "SQLDialect JOOQ used when communicating with the configured datasource, for\n instance \"POSTGRES\".",
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "name": "spring.jpa.database",
      "type": "org.springframework.orm.jpa.vendor.Database",
      "description": "Target database to operate on, auto-detected by default. Can be alternatively set\n using the \"databasePlatform\" property.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.database-platform",
      "type": "java.lang.String",
      "description": "Name of the target database to operate on, auto-detected by default. Can be\n alternatively set using the \"Database\" enum.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.generate-ddl",
      "type": "java.lang.Boolean",
      "description": "Initialize the schema on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jpa.hibernate.ddl-auto",
      "type": "java.lang.String",
      "description": "DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\"\n property. Default to \"create-drop\" when using an embedded database, \"none\"\n otherwise.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "type": "java.lang.String",
      "description": "Hibernate 5 implicit naming strategy fully qualified name.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "type": "java.lang.String",
      "description": "Hibernate 5 physical naming strategy fully qualified name.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.naming.strategy",
      "type": "java.lang.String",
      "description": "Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate\n 5.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "name": "spring.jpa.hibernate.use-new-id-generator-mappings",
      "type": "java.lang.Boolean",
      "description": "Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE. This is\n actually a shortcut for the \"hibernate.id.new_generator_mappings\" property.\n When not specified will default to \"false\" with Hibernate 5 for back\n compatibility.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "name": "spring.jpa.open-in-view",
      "type": "java.lang.Boolean",
      "description": "Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.",
      "defaultValue": true
    },
    {
      "name": "spring.jpa.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional native properties to set on the JPA provider.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "name": "spring.jpa.show-sql",
      "type": "java.lang.Boolean",
      "description": "Enable logging of SQL statements.",
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.borrow-connection-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.local-transaction-mode",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.maintenance-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.max-lifetime",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.reap-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.unique-resource-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.xa-connection-factory-class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.connectionfactory.xa-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.borrow-connection-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.default-isolation-level",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.maintenance-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.max-lifetime",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.reap-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.test-query",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.unique-resource-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.xa-data-source-class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.datasource.xa-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
    },
    {
      "name": "spring.jta.atomikos.properties.checkpoint-interval",
      "type": "java.lang.Long",
      "description": "Interval between checkpoints. A checkpoint reduces the log file size at the expense\n of adding some overhead in the runtime.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": 500
    },
    {
      "name": "spring.jta.atomikos.properties.console-file-count",
      "type": "java.lang.Integer",
      "description": "Number of debug logs files that can be created.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": 1
    },
    {
      "name": "spring.jta.atomikos.properties.console-file-limit",
      "type": "java.lang.Integer",
      "description": "How many bytes can be stored at most in debug logs files. Negative values means\n unlimited.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": -1
    },
    {
      "name": "spring.jta.atomikos.properties.console-file-name",
      "type": "java.lang.String",
      "description": "Debug logs file name.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": "tm.out"
    },
    {
      "name": "spring.jta.atomikos.properties.console-log-level",
      "type": "org.springframework.boot.jta.atomikos.AtomikosLoggingLevel",
      "description": "Console log level.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": "warn"
    },
    {
      "name": "spring.jta.atomikos.properties.default-jta-timeout",
      "type": "java.lang.Long",
      "description": "Default timeout for JTA transactions.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": 10000
    },
    {
      "name": "spring.jta.atomikos.properties.enable-logging",
      "type": "java.lang.Boolean",
      "description": "Enable disk logging.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.atomikos.properties.force-shutdown-on-vm-exit",
      "type": "java.lang.Boolean",
      "description": "Specify if a VM shutdown should trigger forced shutdown of the transaction core.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": false
    },
    {
      "name": "spring.jta.atomikos.properties.log-base-dir",
      "type": "java.lang.String",
      "description": "Directory in which the log files should be stored. Defaults to the current working\n directory.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.atomikos.properties.log-base-name",
      "type": "java.lang.String",
      "description": "Transactions log file base name.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": "tmlog"
    },
    {
      "name": "spring.jta.atomikos.properties.max-actives",
      "type": "java.lang.Integer",
      "description": "Maximum number of active transactions.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": 50
    },
    {
      "name": "spring.jta.atomikos.properties.max-timeout",
      "type": "java.lang.Long",
      "description": "Maximum timeout (in milliseconds) that can be allowed for transactions.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": 300000
    },
    {
      "name": "spring.jta.atomikos.properties.output-dir",
      "type": "java.lang.String",
      "description": "Directory in which to store the debug log files. Defaults to the current working\n directory.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.atomikos.properties.serial-jta-transactions",
      "type": "java.lang.Boolean",
      "description": "Specify if sub-transactions should be joined when possible.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.atomikos.properties.service",
      "type": "java.lang.String",
      "description": "Transaction manager implementation that should be started.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.atomikos.properties.threaded-two-phase-commit",
      "type": "java.lang.Boolean",
      "description": "Use different (and concurrent) threads for two-phase commit on the participating\n resources.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.atomikos.properties.transaction-manager-unique-name",
      "type": "java.lang.String",
      "description": "Transaction manager's unique name. Defaults to the machine's IP address. If you\n plan to run more than one transaction manager against one database you must set\n this property to a unique value.",
      "sourceType": "org.springframework.boot.jta.atomikos.AtomikosProperties"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.acquire-increment",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.acquisition-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.acquisition-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.allow-local-transactions",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.apply-transaction-timeout",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.cache-producers-consumers",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.defer-connection-release",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.disabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.driver-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.failed",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.ignore-recovery-failures",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.password",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.share-transaction-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.test-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.two-pc-ordering-position",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.unique-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.use-tm-join",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.connectionfactory.user",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.acquire-increment",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.acquisition-interval",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.acquisition-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.allow-local-transactions",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.apply-transaction-timeout",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.automatic-enlisting-enabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.class-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.cursor-holdability",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.defer-connection-release",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.disabled",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.driver-properties",
      "type": "java.util.Properties",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.enable-jdbc4-connection-test",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.failed",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.ignore-recovery-failures",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.isolation-level",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.local-auto-commit",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.login-timeout",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.max-idle-time",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.max-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.min-pool-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.prepared-statement-cache-size",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.share-transaction-connections",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.test-query",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.two-pc-ordering-position",
      "type": "java.lang.Integer",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.unique-name",
      "type": "java.lang.String",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.datasource.use-tm-join",
      "type": "java.lang.Boolean",
      "sourceType": "org.springframework.boot.jta.bitronix.PoolingDataSourceBean"
    },
    {
      "name": "spring.jta.bitronix.properties.allow-multiple-lrc",
      "type": "java.lang.Boolean",
      "description": "Allow multiple LRC resources to be enlisted into the same transaction.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.asynchronous2-pc",
      "type": "java.lang.Boolean",
      "description": "Enable asynchronously execution of two phase commit.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.background-recovery-interval",
      "type": "java.lang.Integer",
      "description": "Interval in minutes at which to run the recovery process in the background.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 1,
      "deprecated": true,
      "deprecation": {"replacement": "spring.jta.bitronix.properties.background-recovery-interval-seconds"}
    },
    {
      "name": "spring.jta.bitronix.properties.background-recovery-interval-seconds",
      "type": "java.lang.Integer",
      "description": "Interval in seconds at which to run the recovery process in the background.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.current-node-only-recovery",
      "type": "java.lang.Boolean",
      "description": "Recover only the current node. Should be enabled if you run multiple instances of the transaction manager on the same JMS and JDBC resources.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.debug-zero-resource-transaction",
      "type": "java.lang.Boolean",
      "description": "Log the creation and commit call stacks of transactions executed without a single enlisted resource.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.default-transaction-timeout",
      "type": "java.lang.Integer",
      "description": "Default transaction timeout in seconds.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.disable-jmx",
      "type": "java.lang.Boolean",
      "description": "Enable JMX support.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.exception-analyzer",
      "type": "java.lang.String",
      "description": "Set the fully qualified name of the exception analyzer implementation to use.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.filter-log-status",
      "type": "java.lang.Boolean",
      "description": "Enable filtering of logs so that only mandatory logs are written.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.force-batching-enabled",
      "type": "java.lang.Boolean",
      "description": " Set if disk forces are batched.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.forced-write-enabled",
      "type": "java.lang.Boolean",
      "description": "Set if logs are forced to disk.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.bitronix.properties.graceful-shutdown-interval",
      "type": "java.lang.Integer",
      "description": "Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name",
      "type": "java.lang.String",
      "description": "JNDI name of the TransactionSynchronizationRegistry.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.jndi-user-transaction-name",
      "type": "java.lang.String",
      "description": "JNDI name of the UserTransaction.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.journal",
      "type": "java.lang.String",
      "description": "Name of the journal. Can be 'disk', 'null' or a class name.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "disk"
    },
    {
      "name": "spring.jta.bitronix.properties.log-part1-filename",
      "type": "java.lang.String",
      "description": "Name of the first fragment of the journal.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm1.tlog"
    },
    {
      "name": "spring.jta.bitronix.properties.log-part2-filename",
      "type": "java.lang.String",
      "description": "Name of the second fragment of the journal.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm2.tlog"
    },
    {
      "name": "spring.jta.bitronix.properties.max-log-size-in-mb",
      "type": "java.lang.Integer",
      "description": "Maximum size in megabytes of the journal fragments.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 2
    },
    {
      "name": "spring.jta.bitronix.properties.resource-configuration-filename",
      "type": "java.lang.String",
      "description": "ResourceLoader configuration file name.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.server-id",
      "type": "java.lang.String",
      "description": "ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.",
      "sourceType": "bitronix.tm.Configuration"
    },
    {
      "name": "spring.jta.bitronix.properties.skip-corrupted-logs",
      "type": "java.lang.Boolean",
      "description": "Skip corrupted transactions log entries. Use only at last resort when all you have to recover is a pair of corrupted files.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false
    },
    {
      "name": "spring.jta.bitronix.properties.warn-about-zero-resource-transaction",
      "type": "java.lang.Boolean",
      "description": "Log a warning for transactions executed without a single enlisted resource.",
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true
    },
    {
      "name": "spring.jta.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable JTA support.",
      "defaultValue": true
    },
    {
      "name": "spring.jta.log-dir",
      "type": "java.lang.String",
      "description": "Transaction logs directory.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.jta.narayana.default-timeout",
      "type": "java.lang.Integer",
      "description": "Transaction timeout in seconds.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": 60
    },
    {
      "name": "spring.jta.narayana.expiry-scanners",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of expiry scanners.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": "com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner"
    },
    {
      "name": "spring.jta.narayana.log-dir",
      "type": "java.lang.String",
      "description": "Transaction object store directory.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.one-phase-commit",
      "type": "java.lang.Boolean",
      "description": "Enable one phase commit optimization.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": true
    },
    {
      "name": "spring.jta.narayana.periodic-recovery-period",
      "type": "java.lang.Integer",
      "description": "Interval in which periodic recovery scans are performed in seconds.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": 120
    },
    {
      "name": "spring.jta.narayana.recovery-backoff-period",
      "type": "java.lang.Integer",
      "description": "Back off period between first and second phases of the recovery scan in seconds.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": 10
    },
    {
      "name": "spring.jta.narayana.recovery-db-pass",
      "type": "java.lang.String",
      "description": "Database password to be used by recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-db-user",
      "type": "java.lang.String",
      "description": "Database username to be used by recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-jms-pass",
      "type": "java.lang.String",
      "description": "JMS password to be used by recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-jms-user",
      "type": "java.lang.String",
      "description": "JMS username to be used by recovery manager.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.recovery-modules",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of recovery modules.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.narayana.transaction-manager-id",
      "type": "java.lang.String",
      "description": "Unique transaction manager id.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties",
      "defaultValue": "1"
    },
    {
      "name": "spring.jta.narayana.xa-resource-orphan-filters",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of orphan filters.",
      "sourceType": "org.springframework.boot.jta.narayana.NarayanaProperties"
    },
    {
      "name": "spring.jta.transaction-manager-id",
      "type": "java.lang.String",
      "description": "Transaction manager unique identifier.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "name": "spring.kafka.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.client-id",
      "type": "java.lang.String",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.consumer.auto-commit-interval",
      "type": "java.lang.Integer",
      "description": "Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n if 'enable.auto.commit' true.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.auto-offset-reset",
      "type": "java.lang.String",
      "description": "What to do when there is no initial offset in Kafka or if the current offset\n does not exist any more on the server.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.client-id",
      "type": "java.lang.String",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.enable-auto-commit",
      "type": "java.lang.Boolean",
      "description": "If true the consumer's offset will be periodically committed in the background.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.fetch-max-wait",
      "type": "java.lang.Integer",
      "description": "Maximum amount of time in milliseconds the server will block before answering\n the fetch request if there isn't sufficient data to immediately satisfy the\n requirement given by \"fetch.min.bytes\".",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.fetch-min-size",
      "type": "java.lang.Integer",
      "description": "Minimum amount of data the server should return for a fetch request in bytes.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.group-id",
      "type": "java.lang.String",
      "description": "Unique string that identifies the consumer group this consumer belongs to.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.heartbeat-interval",
      "type": "java.lang.Integer",
      "description": "Expected time in milliseconds between heartbeats to the consumer coordinator.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.key-deserializer",
      "type": "java.lang.Class<?>",
      "description": "Deserializer class for keys.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.max-poll-records",
      "type": "java.lang.Integer",
      "description": "Maximum number of records returned in a single call to poll().",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.consumer.value-deserializer",
      "type": "java.lang.Class<?>",
      "description": "Deserializer class for values.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "name": "spring.kafka.listener.ack-count",
      "type": "java.lang.Integer",
      "description": "Number of records between offset commits when ackMode is \"COUNT\" or\n \"COUNT_TIME\".",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.ack-mode",
      "type": "org.springframework.kafka.listener.AbstractMessageListenerContainer$AckMode",
      "description": "Listener AckMode; see the spring-kafka documentation.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.ack-time",
      "type": "java.lang.Long",
      "description": "Time in milliseconds between offset commits when ackMode is \"TIME\" or\n \"COUNT_TIME\".",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Number of threads to run in the listener containers.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.listener.poll-timeout",
      "type": "java.lang.Long",
      "description": "Timeout in milliseconds to use when polling the consumer.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "name": "spring.kafka.producer.acks",
      "type": "java.lang.String",
      "description": "Number of acknowledgments the producer requires the leader to have received\n before considering a request complete.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of records to batch before sending.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.buffer-memory",
      "type": "java.lang.Long",
      "description": "Total bytes of memory the producer can use to buffer records waiting to be sent\n to the server.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.client-id",
      "type": "java.lang.String",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.compression-type",
      "type": "java.lang.String",
      "description": "Compression type for all data generated by the producer.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.key-serializer",
      "type": "java.lang.Class<?>",
      "description": "Serializer class for keys.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.retries",
      "type": "java.lang.Integer",
      "description": "When greater than zero, enables retrying of failed sends.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.producer.value-serializer",
      "type": "java.lang.Class<?>",
      "description": "Serializer class for values.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "name": "spring.kafka.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional properties used to configure the client.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "name": "spring.kafka.ssl.key-password",
      "type": "java.lang.String",
      "description": "Password of the private key in the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.keystore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.keystore-password",
      "type": "java.lang.String",
      "description": "Store password for the key store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.truststore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.ssl.truststore-password",
      "type": "java.lang.String",
      "description": "Store password for the trust store file.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "name": "spring.kafka.template.default-topic",
      "type": "java.lang.String",
      "description": "Default topic to which messages will be sent.",
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template"
    },
    {
      "name": "spring.ldap.base",
      "type": "java.lang.String",
      "description": "Base suffix from which all operations should originate.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.base-environment",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "LDAP specification settings.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.embedded.base-dn",
      "type": "java.lang.String",
      "description": "Base DNs.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties"
    },
    {
      "name": "spring.ldap.embedded.credential.password",
      "type": "java.lang.String",
      "description": "Embedded LDAP password.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential"
    },
    {
      "name": "spring.ldap.embedded.credential.username",
      "type": "java.lang.String",
      "description": "Embedded LDAP username.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential"
    },
    {
      "name": "spring.ldap.embedded.ldif",
      "type": "java.lang.String",
      "description": "Schema (LDIF) script resource reference.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": "classpath:schema.ldif"
    },
    {
      "name": "spring.ldap.embedded.port",
      "type": "java.lang.Integer",
      "description": "Embedded LDAP port.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.ldap.embedded.validation.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable LDAP schema validation.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "defaultValue": true
    },
    {
      "name": "spring.ldap.embedded.validation.schema",
      "type": "org.springframework.core.io.Resource",
      "description": "Path to the custom schema.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation"
    },
    {
      "name": "spring.ldap.password",
      "type": "java.lang.String",
      "description": "Login password of the LDAP.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.urls",
      "type": "java.lang.String[]",
      "description": "LDAP URLs.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.ldap.username",
      "type": "java.lang.String",
      "description": "Login user of the LDAP.",
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "name": "spring.mail.default-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Default MimeMessage encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.mail.host",
      "type": "java.lang.String",
      "description": "SMTP server host.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.jndi-name",
      "type": "java.lang.String",
      "description": "Session JNDI name. When set, takes precedence to others mail settings.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.password",
      "type": "java.lang.String",
      "description": "Login password of the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.port",
      "type": "java.lang.Integer",
      "description": "SMTP server port.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional JavaMail session properties.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.mail.protocol",
      "type": "java.lang.String",
      "description": "Protocol used by the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "smtp"
    },
    {
      "name": "spring.mail.test-connection",
      "type": "java.lang.Boolean",
      "description": "Test that the mail server is available on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mail.username",
      "type": "java.lang.String",
      "description": "Login user of the SMTP server.",
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "name": "spring.main.banner-mode",
      "type": "org.springframework.boot.Banner$Mode",
      "description": "Mode used to display the banner when the application runs.",
      "sourceType": "org.springframework.boot.SpringApplication",
      "defaultValue": "console"
    },
    {
      "name": "spring.main.show-banner",
      "type": "java.lang.Boolean",
      "description": "Display the banner when the application runs.",
      "sourceType": "org.springframework.boot.SpringApplication",
      "defaultValue": true,
      "deprecated": true,
      "deprecation": {"replacement": "spring.main.banner-mode"}
    },
    {
      "name": "spring.main.sources",
      "type": "java.util.Set<java.lang.Object>",
      "description": "Sources (class name, package name or XML resource location) to include in the ApplicationContext.",
      "sourceType": "org.springframework.boot.SpringApplication"
    },
    {
      "name": "spring.main.web-environment",
      "type": "java.lang.Boolean",
      "description": "Run the application in a web environment (auto-detected by default).",
      "sourceType": "org.springframework.boot.SpringApplication"
    },
    {
      "name": "spring.mandatory-file-encoding",
      "type": "java.nio.charset.Charset",
      "description": "Expected character encoding the application must use.",
      "sourceType": "org.springframework.boot.context.FileEncodingApplicationListener"
    },
    {
      "name": "spring.messages.always-use-message-format",
      "type": "java.lang.Boolean",
      "description": "Set whether to always apply the MessageFormat rules, parsing even messages without\n arguments.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": false
    },
    {
      "name": "spring.messages.basename",
      "type": "java.lang.String",
      "description": "Comma-separated list of basenames, each following the ResourceBundle convention.\n Essentially a fully-qualified classpath location. If it doesn't contain a package\n qualifier (such as \"org.mypackage\"), it will be resolved from the classpath root.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": "messages"
    },
    {
      "name": "spring.messages.cache-seconds",
      "type": "java.lang.Integer",
      "description": "Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles\n are cached forever.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": -1
    },
    {
      "name": "spring.messages.encoding",
      "type": "java.nio.charset.Charset",
      "description": "Message bundles encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.messages.fallback-to-system-locale",
      "type": "java.lang.Boolean",
      "description": "Set whether to fall back to the system Locale if no files for a specific Locale\n have been found. if this is turned off, the only fallback will be the default file\n (e.g. \"messages.properties\" for basename \"messages\").",
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": true
    },
    {
      "name": "spring.metrics.export.aggregate.key-pattern",
      "type": "java.lang.String",
      "description": "Pattern that tells the aggregator what to do with the keys from the source\n repository. The keys in the source repository are assumed to be period\n separated, and the pattern is in the same format, e.g. \"d.d.k.d\". Here \"d\"\n means \"discard\" and \"k\" means \"keep\" the key segment in the corresponding\n position in the source.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Aggregate",
      "defaultValue": ""
    },
    {
      "name": "spring.metrics.export.aggregate.prefix",
      "type": "java.lang.String",
      "description": "Prefix for global repository if active. Should be unique for this JVM, but most\n useful if it also has the form \"a.b\" where \"a\" is unique to this logical\n process (this application) and \"b\" is unique to this physical process. If you\n set spring.application.name elsewhere, then the default will be in the right\n form.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Aggregate",
      "defaultValue": ""
    },
    {
      "name": "spring.metrics.export.delay-millis",
      "type": "java.lang.Long",
      "description": "Delay in milliseconds between export ticks. Metrics are exported to external\n sources on a schedule with this delay.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties"
    },
    {
      "name": "spring.metrics.export.enabled",
      "type": "java.lang.Boolean",
      "description": "Flag to enable metric export (assuming a MetricWriter is available).",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties",
      "defaultValue": true
    },
    {
      "name": "spring.metrics.export.excludes",
      "type": "java.lang.String[]",
      "description": "List of patterns for metric names to exclude. Applied after the includes.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties"
    },
    {
      "name": "spring.metrics.export.includes",
      "type": "java.lang.String[]",
      "description": "List of patterns for metric names to include.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties"
    },
    {
      "name": "spring.metrics.export.redis.key",
      "type": "java.lang.String",
      "description": "Key for redis repository export (if active). Should be globally unique for a\n system sharing a redis repository across multiple processes.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Redis",
      "defaultValue": "keys.spring.metrics"
    },
    {
      "name": "spring.metrics.export.redis.prefix",
      "type": "java.lang.String",
      "description": "Prefix for redis repository if active. Should be globally unique across all\n processes sharing the same repository.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Redis",
      "defaultValue": "spring.metrics"
    },
    {
      "name": "spring.metrics.export.send-latest",
      "type": "java.lang.Boolean",
      "description": "Flag to switch off any available optimizations based on not exporting unchanged\n metric values.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties"
    },
    {
      "name": "spring.metrics.export.statsd.host",
      "type": "java.lang.String",
      "description": "Host of a statsd server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Statsd"
    },
    {
      "name": "spring.metrics.export.statsd.port",
      "type": "java.lang.Integer",
      "description": "Port of a statsd server to receive exported metrics.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Statsd",
      "defaultValue": 8125
    },
    {
      "name": "spring.metrics.export.statsd.prefix",
      "type": "java.lang.String",
      "description": "Prefix for statsd exported metrics.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties$Statsd"
    },
    {
      "name": "spring.metrics.export.triggers",
      "type": "java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.export.SpecificTriggerProperties>",
      "description": "Specific trigger properties per MetricWriter bean name.",
      "sourceType": "org.springframework.boot.actuate.metrics.export.MetricExportProperties"
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.enable-fallback",
      "type": "java.lang.Boolean",
      "description": "Enable support for fallback resolution.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable device view resolver.",
      "defaultValue": false
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.mobile-prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names for mobile devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "mobile/"
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.mobile-suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names for mobile devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.normal-prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names for normal devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.normal-suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names for normal devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.tablet-prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names for tablet devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "tablet/"
    },
    {
      "name": "spring.mobile.devicedelegatingviewresolver.tablet-suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names for tablet devices.",
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": ""
    },
    {
      "name": "spring.mobile.sitepreference.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable SitePreferenceHandler.",
      "defaultValue": true
    },
    {
      "name": "spring.mongodb.embedded.features",
      "type": "java.util.Set<de.flapdoodle.embed.mongo.distribution.Feature>",
      "description": "Comma-separated list of features to enable.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties"
    },
    {
      "name": "spring.mongodb.embedded.storage.database-dir",
      "type": "java.lang.String",
      "description": "Directory used for data storage.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.storage.oplog-size",
      "type": "java.lang.Integer",
      "description": "Maximum size of the oplog in megabytes.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.storage.repl-set-name",
      "type": "java.lang.String",
      "description": "Name of the replica set.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "name": "spring.mongodb.embedded.version",
      "type": "java.lang.String",
      "description": "Version of Mongo to use.",
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "defaultValue": "3.2.2"
    },
    {
      "name": "spring.mustache.allow-request-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.allow-session-override",
      "type": "java.lang.Boolean",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller\n generated model attributes of the same name.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.charset",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.mustache.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mustache.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.mustache.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC view resolution for this technology.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mustache.expose-request-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all request attributes should be added to the model prior to merging\n with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.expose-session-attributes",
      "type": "java.lang.Boolean",
      "description": "Set whether all HttpSession attributes should be added to the model prior to\n merging with the template.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mustache.expose-spring-macro-helpers",
      "type": "java.lang.Boolean",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the\n name \"springMacroRequestContext\".",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mustache.prefix",
      "type": "java.lang.String",
      "description": "Prefix to apply to template names.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.mustache.request-context-attribute",
      "type": "java.lang.String",
      "description": "Name of the RequestContext attribute for all views.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mustache.suffix",
      "type": "java.lang.String",
      "description": "Suffix to apply to template names.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": ".html"
    },
    {
      "name": "spring.mustache.view-names",
      "type": "java.lang.String[]",
      "description": "White list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "name": "spring.mvc.async.request-timeout",
      "type": "java.lang.Long",
      "description": "Amount of time (in milliseconds) before asynchronous request handling times\n out. If this value is not set, the default timeout of the underlying\n implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Async"
    },
    {
      "name": "spring.mvc.date-format",
      "type": "java.lang.String",
      "description": "Date format to use (e.g. dd/MM/yyyy).",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.dispatch-options-request",
      "type": "java.lang.Boolean",
      "description": "Dispatch OPTIONS requests to the FrameworkServlet doService method.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.dispatch-trace-request",
      "type": "java.lang.Boolean",
      "description": "Dispatch TRACE requests to the FrameworkServlet doService method.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.favicon.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable resolution of favicon.ico.",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.formcontent.putfilter.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable Spring's HttpPutFormContentFilter.",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.ignore-default-model-on-redirect",
      "type": "java.lang.Boolean",
      "description": "If the content of the \"default\" model should be ignored during redirect scenarios.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": true
    },
    {
      "name": "spring.mvc.locale",
      "type": "java.util.Locale",
      "description": "Locale to use. By default, this locale is overridden by the \"Accept-Language\"\n header.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.locale-resolver",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$LocaleResolver",
      "description": "Define how the locale should be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": "accept-header"
    },
    {
      "name": "spring.mvc.log-resolved-exception",
      "type": "java.lang.Boolean",
      "description": "Enable warn logging of exceptions resolved by a \"HandlerExceptionResolver\".",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.media-types",
      "type": "java.util.Map<java.lang.String,org.springframework.http.MediaType>",
      "description": "Maps file extensions to media types for content negotiation, e.g. yml->text/yaml.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.message-codes-resolver-format",
      "type": "org.springframework.validation.DefaultMessageCodesResolver$Format",
      "description": "Formatting strategy for message codes (PREFIX_ERROR_CODE, POSTFIX_ERROR_CODE).",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "name": "spring.mvc.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the dispatcher servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "spring.mvc.static-path-pattern",
      "type": "java.lang.String",
      "description": "Path pattern used for static resources.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": "/**"
    },
    {
      "name": "spring.mvc.throw-exception-if-no-handler-found",
      "type": "java.lang.Boolean",
      "description": "If a \"NoHandlerFoundException\" should be thrown if no Handler was found to process\n a request.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false
    },
    {
      "name": "spring.mvc.view.prefix",
      "type": "java.lang.String",
      "description": "Spring MVC view prefix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View"
    },
    {
      "name": "spring.mvc.view.suffix",
      "type": "java.lang.String",
      "description": "Spring MVC view suffix.",
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View"
    },
    {
      "name": "spring.output.ansi.enabled",
      "type": "org.springframework.boot.ansi.AnsiOutput$Enabled",
      "description": "Configure the ANSI output.",
      "defaultValue": "detect"
    },
    {
      "name": "spring.pid.fail-on-write-error",
      "type": "java.lang.Boolean",
      "description": "Fail if ApplicationPidFileWriter is used but it cannot write the PID file.",
      "sourceType": "org.springframework.boot.system.ApplicationPidFileWriter"
    },
    {
      "name": "spring.pid.file",
      "type": "java.lang.String",
      "description": "Location of the PID file to write (if ApplicationPidFileWriter is used).",
      "sourceType": "org.springframework.boot.system.ApplicationPidFileWriter"
    },
    {
      "name": "spring.profiles.active",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of active profiles. Can be overridden by a command line switch.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener"
    },
    {
      "name": "spring.profiles.include",
      "type": "java.util.List<java.lang.String>",
      "description": "Unconditionally activate the specified comma separated profiles.",
      "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener"
    },
    {
      "name": "spring.rabbitmq.addresses",
      "type": "java.lang.String",
      "description": "Comma-separated list of addresses to which the client should connect.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.cache.channel.checkout-timeout",
      "type": "java.lang.Long",
      "description": "Number of milliseconds to wait to obtain a channel if the cache size has\n been reached. If 0, always create a new channel.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "name": "spring.rabbitmq.cache.channel.size",
      "type": "java.lang.Integer",
      "description": "Number of channels to retain in the cache. When \"check-timeout\" > 0, max\n channels per connection.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "name": "spring.rabbitmq.cache.connection.mode",
      "type": "org.springframework.amqp.rabbit.connection.CachingConnectionFactory$CacheMode",
      "description": "Connection factory cache mode.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "defaultValue": "channel"
    },
    {
      "name": "spring.rabbitmq.cache.connection.size",
      "type": "java.lang.Integer",
      "description": "Number of connections to cache. Only applies when mode is CONNECTION.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection"
    },
    {
      "name": "spring.rabbitmq.connection-timeout",
      "type": "java.lang.Integer",
      "description": "Connection timeout, in milliseconds; zero for infinite.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.dynamic",
      "type": "java.lang.Boolean",
      "description": "Create an AmqpAdmin bean.",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.host",
      "type": "java.lang.String",
      "description": "RabbitMQ host.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.rabbitmq.listener.acknowledge-mode",
      "type": "org.springframework.amqp.core.AcknowledgeMode",
      "description": "Acknowledge mode of container.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.auto-startup",
      "type": "java.lang.Boolean",
      "description": "Start the container automatically on startup.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Minimum number of consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.default-requeue-rejected",
      "type": "java.lang.Boolean",
      "description": "Whether rejected deliveries are requeued by default; default true.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.idle-event-interval",
      "type": "java.lang.Long",
      "description": "How often idle container events should be published in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.max-concurrency",
      "type": "java.lang.Integer",
      "description": "Maximum number of consumers.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.prefetch",
      "type": "java.lang.Integer",
      "description": "Number of messages to be handled in a single request. It should be greater than\n or equal to the transaction size (if used).",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.listener.retry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether or not publishing retries are enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.listener.retry.initial-interval",
      "type": "java.lang.Long",
      "description": "Interval between the first and second attempt to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1000
    },
    {
      "name": "spring.rabbitmq.listener.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 3
    },
    {
      "name": "spring.rabbitmq.listener.retry.max-interval",
      "type": "java.lang.Long",
      "description": "Maximum interval between attempts.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 10000
    },
    {
      "name": "spring.rabbitmq.listener.retry.multiplier",
      "type": "java.lang.Double",
      "description": "A multiplier to apply to the previous retry interval.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1
    },
    {
      "name": "spring.rabbitmq.listener.retry.stateless",
      "type": "java.lang.Boolean",
      "description": "Whether or not retries are stateless or stateful.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true
    },
    {
      "name": "spring.rabbitmq.listener.transaction-size",
      "type": "java.lang.Integer",
      "description": "Number of messages to be processed in a transaction. For best results it should\n be less than or equal to the prefetch count.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "name": "spring.rabbitmq.password",
      "type": "java.lang.String",
      "description": "Login to authenticate against the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.port",
      "type": "java.lang.Integer",
      "description": "RabbitMQ port.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": 5672
    },
    {
      "name": "spring.rabbitmq.publisher-confirms",
      "type": "java.lang.Boolean",
      "description": "Enable publisher confirms.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.publisher-returns",
      "type": "java.lang.Boolean",
      "description": "Enable publisher returns.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.requested-heartbeat",
      "type": "java.lang.Integer",
      "description": "Requested heartbeat timeout, in seconds; zero for none.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.ssl.algorithm",
      "type": "java.lang.String",
      "description": "SSL algorithm to use (e.g. TLSv1.1). Default is set automatically by the rabbit\n client library.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable SSL support.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.ssl.key-store",
      "type": "java.lang.String",
      "description": "Path to the key store that holds the SSL certificate.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.key-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the key store.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.trust-store",
      "type": "java.lang.String",
      "description": "Trust store that holds SSL certificates.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.ssl.trust-store-password",
      "type": "java.lang.String",
      "description": "Password used to access the trust store.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "name": "spring.rabbitmq.template.mandatory",
      "type": "java.lang.Boolean",
      "description": "Enable mandatory messages. If a mandatory message cannot be routed to a queue\n by the server, it will return an unroutable message with a Return method.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.receive-timeout",
      "type": "java.lang.Long",
      "description": "Timeout for receive() operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.reply-timeout",
      "type": "java.lang.Long",
      "description": "Timeout for sendAndReceive() operations.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "name": "spring.rabbitmq.template.retry.enabled",
      "type": "java.lang.Boolean",
      "description": "Whether or not publishing retries are enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": false
    },
    {
      "name": "spring.rabbitmq.template.retry.initial-interval",
      "type": "java.lang.Long",
      "description": "Interval between the first and second attempt to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1000
    },
    {
      "name": "spring.rabbitmq.template.retry.max-attempts",
      "type": "java.lang.Integer",
      "description": "Maximum number of attempts to publish or deliver a message.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 3
    },
    {
      "name": "spring.rabbitmq.template.retry.max-interval",
      "type": "java.lang.Long",
      "description": "Maximum interval between attempts.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 10000
    },
    {
      "name": "spring.rabbitmq.template.retry.multiplier",
      "type": "java.lang.Double",
      "description": "A multiplier to apply to the previous retry interval.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1
    },
    {
      "name": "spring.rabbitmq.username",
      "type": "java.lang.String",
      "description": "Login user to authenticate to the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.rabbitmq.virtual-host",
      "type": "java.lang.String",
      "description": "Virtual host to use when connecting to the broker.",
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "name": "spring.redis.cluster.max-redirects",
      "type": "java.lang.Integer",
      "description": "Maximum number of redirects to follow when executing commands across the\n cluster.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "name": "spring.redis.cluster.nodes",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-separated list of \"host:port\" pairs to bootstrap from. This represents an\n \"initial\" list of cluster nodes and is required to have at least one entry.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "name": "spring.redis.database",
      "type": "java.lang.Integer",
      "description": "Database index used by the connection factory.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.host",
      "type": "java.lang.String",
      "description": "Redis server host.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": "localhost"
    },
    {
      "name": "spring.redis.password",
      "type": "java.lang.String",
      "description": "Login password of the redis server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.redis.pool.max-active",
      "type": "java.lang.Integer",
      "description": "Max number of connections that can be allocated by the pool at a given time.\n Use a negative value for no limit.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.pool.max-idle",
      "type": "java.lang.Integer",
      "description": "Max number of \"idle\" connections in the pool. Use a negative value to indicate\n an unlimited number of idle connections.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8
    },
    {
      "name": "spring.redis.pool.max-wait",
      "type": "java.lang.Integer",
      "description": "Maximum amount of time (in milliseconds) a connection allocation should block\n before throwing an exception when the pool is exhausted. Use a negative value\n to block indefinitely.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": -1
    },
    {
      "name": "spring.redis.pool.min-idle",
      "type": "java.lang.Integer",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This\n setting only has an effect if it is positive.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.port",
      "type": "java.lang.Integer",
      "description": "Redis server port.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 6379
    },
    {
      "name": "spring.redis.sentinel.master",
      "type": "java.lang.String",
      "description": "Name of Redis server.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "name": "spring.redis.sentinel.nodes",
      "type": "java.lang.String",
      "description": "Comma-separated list of host:port pairs.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "name": "spring.redis.ssl",
      "type": "java.lang.Boolean",
      "description": "Enable SSL.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": false
    },
    {
      "name": "spring.redis.timeout",
      "type": "java.lang.Integer",
      "description": "Connection timeout in milliseconds.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0
    },
    {
      "name": "spring.redis.url",
      "type": "java.lang.String",
      "description": "Redis url, which will overrule host, port and password if set.",
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "name": "spring.resources.add-mappings",
      "type": "java.lang.Boolean",
      "description": "Enable default resource handling.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "defaultValue": true
    },
    {
      "name": "spring.resources.cache-period",
      "type": "java.lang.Integer",
      "description": "Cache period for the resources served by the resource handler, in seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "name": "spring.resources.chain.cache",
      "type": "java.lang.Boolean",
      "description": "Enable caching in the Resource chain.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": true
    },
    {
      "name": "spring.resources.chain.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the Spring Resource Handling chain. Disabled by default unless at least\n one strategy has been enabled.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain"
    },
    {
      "name": "spring.resources.chain.gzipped",
      "type": "java.lang.Boolean",
      "description": "Enable resolution of already gzipped resources. Checks for a resource name\n variant with the \"*.gz\" extension.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.html-application-cache",
      "type": "java.lang.Boolean",
      "description": "Enable HTML5 application cache manifest rewriting.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.content.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the content Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.content.paths",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of patterns to apply to the Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": ["/**"]
    },
    {
      "name": "spring.resources.chain.strategy.fixed.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable the fixed Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": false
    },
    {
      "name": "spring.resources.chain.strategy.fixed.paths",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of patterns to apply to the Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": ["/**"]
    },
    {
      "name": "spring.resources.chain.strategy.fixed.version",
      "type": "java.lang.String",
      "description": "Version string to use for the Version Strategy.",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed"
    },
    {
      "name": "spring.resources.static-locations",
      "type": "java.lang.String[]",
      "description": "Locations of static resources. Defaults to classpath:[/META-INF/resources/,\n /resources/, /static/, /public/] plus context:/ (the root of the servlet context).",
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "name": "spring.sendgrid.api-key",
      "type": "java.lang.String",
      "description": "SendGrid api key. Alternative to username/password.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.password",
      "type": "java.lang.String",
      "description": "SendGrid password.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.sendgrid.proxy.host",
      "type": "java.lang.String",
      "description": "SendGrid proxy host.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "name": "spring.sendgrid.proxy.port",
      "type": "java.lang.Integer",
      "description": "SendGrid proxy port.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "name": "spring.sendgrid.username",
      "type": "java.lang.String",
      "description": "SendGrid username. Alternative to api key.",
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "name": "spring.session.hazelcast.flush-mode",
      "type": "org.springframework.session.hazelcast.HazelcastFlushMode",
      "description": "Sessions flush mode.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast",
      "defaultValue": "on-save"
    },
    {
      "name": "spring.session.hazelcast.map-name",
      "type": "java.lang.String",
      "description": "Name of the map used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast",
      "defaultValue": "spring:session:sessions"
    },
    {
      "name": "spring.session.jdbc.initializer.enabled",
      "type": "java.lang.Boolean",
      "description": "Create the required session tables on startup if necessary. Enabled\n automatically if the default table name is set or a custom schema is\n configured.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc$Initializer"
    },
    {
      "name": "spring.session.jdbc.schema",
      "type": "java.lang.String",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "defaultValue": "classpath:org/springframework/session/jdbc/schema-@@platform@@.sql"
    },
    {
      "name": "spring.session.jdbc.table-name",
      "type": "java.lang.String",
      "description": "Name of database table used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "defaultValue": "SPRING_SESSION"
    },
    {
      "name": "spring.session.mongo.collection-name",
      "type": "java.lang.String",
      "description": "Collection name used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Mongo",
      "defaultValue": "sessions"
    },
    {
      "name": "spring.session.redis.flush-mode",
      "type": "org.springframework.session.data.redis.RedisFlushMode",
      "description": "Sessions flush mode.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis",
      "defaultValue": "on-save"
    },
    {
      "name": "spring.session.redis.namespace",
      "type": "java.lang.String",
      "description": "Namespace for keys used to store sessions.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis",
      "defaultValue": ""
    },
    {
      "name": "spring.session.store-type",
      "type": "org.springframework.boot.autoconfigure.session.StoreType",
      "description": "Session store type.",
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "name": "spring.social.auto-connection-views",
      "type": "java.lang.Boolean",
      "description": "Enable the connection status view for supported providers.",
      "defaultValue": false
    },
    {
      "name": "spring.social.facebook.app-id",
      "type": "java.lang.String",
      "description": "Application id.",
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties"
    },
    {
      "name": "spring.social.facebook.app-secret",
      "type": "java.lang.String",
      "description": "Application secret.",
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties"
    },
    {
      "name": "spring.social.linkedin.app-id",
      "type": "java.lang.String",
      "description": "Application id.",
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties"
    },
    {
      "name": "spring.social.linkedin.app-secret",
      "type": "java.lang.String",
      "description": "Application secret.",
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties"
    },
    {
      "name": "spring.social.twitter.app-id",
      "type": "java.lang.String",
      "description": "Application id.",
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties"
    },
    {
      "name": "spring.social.twitter.app-secret",
      "type": "java.lang.String",
      "description": "Application secret.",
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties"
    },
    {
      "name": "spring.thymeleaf.cache",
      "type": "java.lang.Boolean",
      "description": "Enable template caching.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.check-template",
      "type": "java.lang.Boolean",
      "description": "Check that the template exists before rendering it (Thymeleaf 3+).",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.check-template-location",
      "type": "java.lang.Boolean",
      "description": "Check that the templates location exists.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.content-type",
      "type": "org.springframework.util.MimeType",
      "description": "Content-Type value.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "text/html"
    },
    {
      "name": "spring.thymeleaf.enabled",
      "type": "java.lang.Boolean",
      "description": "Enable MVC Thymeleaf view resolution.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true
    },
    {
      "name": "spring.thymeleaf.encoding",
      "type": "java.nio.charset.Charset",
      "description": "Template encoding.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "UTF-8"
    },
    {
      "name": "spring.thymeleaf.excluded-view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names that should be excluded from resolution.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.thymeleaf.mode",
      "type": "java.lang.String",
      "description": "Template mode to be applied to templates. See also StandardTemplateModeHandlers.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "HTML5"
    },
    {
      "name": "spring.thymeleaf.prefix",
      "type": "java.lang.String",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "classpath:/templates/"
    },
    {
      "name": "spring.thymeleaf.suffix",
      "type": "java.lang.String",
      "description": "Suffix that gets appended to view names when building a URL.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": ".html"
    },
    {
      "name": "spring.thymeleaf.template-resolver-order",
      "type": "java.lang.Integer",
      "description": "Order of the template resolver in the chain. By default, the template resolver is\n first in the chain. Order start at 1 and should only be set if you have defined\n additional \"TemplateResolver\" beans.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.thymeleaf.view-names",
      "type": "java.lang.String[]",
      "description": "Comma-separated list of view names that can be resolved.",
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "name": "spring.transaction.default-timeout",
      "type": "java.lang.Integer",
      "description": "Default transaction timeout in seconds.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "name": "spring.transaction.rollback-on-commit-failure",
      "type": "java.lang.Boolean",
      "description": "Perform the rollback on commit failures.",
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "name": "spring.webservices.path",
      "type": "java.lang.String",
      "description": "Path that serves as the base URI for the services.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "defaultValue": "/services"
    },
    {
      "name": "spring.webservices.servlet.init",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Servlet init parameters to pass to Spring Web Services.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet"
    },
    {
      "name": "spring.webservices.servlet.load-on-startup",
      "type": "java.lang.Integer",
      "description": "Load on startup priority of the Spring Web Services servlet.",
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "defaultValue": -1
    },
    {
      "name": "trace",
      "type": "java.lang.Boolean",
      "description": "Enable trace logs.",
      "sourceType": "org.springframework.boot.logging.LoggingApplicationListener",
      "defaultValue": false
    }
  ],
  "hints": [
    {
      "name": "endpoints.cors.allowed-headers",
      "values": [{"value": "*"}],
      "providers": [{"name": "any"}]
    },
    {
      "name": "endpoints.cors.allowed-methods",
      "values": [{"value": "*"}],
      "providers": [{"name": "any"}]
    },
    {
      "name": "endpoints.cors.allowed-origins",
      "values": [{"value": "*"}],
      "providers": [{"name": "any"}]
    },
    {
      "name": "liquibase.change-log",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.springframework.core.io.Resource"}
      }]
    },
    {
      "name": "logging.level.keys",
      "values": [{
        "value": "root",
        "description": "Root logger used to assign the default logging level."
      }],
      "providers": [{"name": "logger-name"}]
    },
    {
      "name": "logging.level.values",
      "values": [
        {"value": "trace"},
        {"value": "debug"},
        {"value": "info"},
        {"value": "warn"},
        {"value": "error"},
        {"value": "fatal"},
        {"value": "off"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "management.health.status.order",
      "values": [
        {"value": "UNKNOWN"},
        {"value": "UP"},
        {"value": "DOWN"},
        {"value": "OUT_OF_SERVICE"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "management.shell.auth.type",
      "values": [
        {
          "value": "simple",
          "description": "Use a simple user/password based authentication."
        },
        {
          "value": "spring",
          "description": "Integrate with Spring Security."
        },
        {
          "value": "key",
          "description": "Use a Key-based authentication."
        },
        {
          "value": "jaas",
          "description": "Use JAAS authentication."
        }
      ]
    },
    {
      "name": "server.jsp-servlet.class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.servlet.http.HttpServlet"}
      }]
    },
    {
      "name": "spring.cache.jcache.provider",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.cache.spi.CachingProvider"}
      }]
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.springframework.data.cassandra.config.SchemaAction"}
      }]
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.springframework.data.mapping.model.FieldNamingStrategy"}
      }]
    },
    {
      "name": "spring.data.neo4j.compiler",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.neo4j.ogm.compiler.Compiler"}
      }]
    },
    {
      "name": "spring.datasource.data",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "java.util.List<org.springframework.core.io.Resource>"}
      }]
    },
    {
      "name": "spring.datasource.driver-class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "java.sql.Driver"}
      }]
    },
    {
      "name": "spring.datasource.schema",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "java.util.List<org.springframework.core.io.Resource>"}
      }]
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "javax.sql.XADataSource"}
      }]
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "values": [
        {"value": "gson"},
        {"value": "jackson"}
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "spring.jmx.server",
      "providers": [{
        "name": "spring-bean-reference",
        "parameters": {"target": "javax.management.MBeanServer"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.ddl-auto",
      "values": [
        {
          "value": "none",
          "description": "Disable DDL handling."
        },
        {
          "value": "validate",
          "description": "Validate the schema, make no changes to the database."
        },
        {
          "value": "update",
          "description": "Update the schema if necessary."
        },
        {
          "value": "create",
          "description": "Create the schema and destroy previous data."
        },
        {
          "value": "create-drop",
          "description": "Create and then destroy the schema at the end of the session."
        }
      ]
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.boot.model.naming.ImplicitNamingStrategy"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.boot.model.naming.PhysicalNamingStrategy"}
      }]
    },
    {
      "name": "spring.jpa.hibernate.naming.strategy",
      "providers": [{
        "name": "class-reference",
        "parameters": {"target": "org.hibernate.cfg.NamingStrategy"}
      }]
    },
    {
      "name": "spring.kafka.consumer.auto-offset-reset",
      "values": [
        {
          "value": "earliest",
          "description": "Automatically reset the offset to the earliest offset."
        },
        {
          "value": "latest",
          "description": "Automatically reset the offset to the latest offset."
        },
        {
          "value": "none",
          "description": "Throw exception to the consumer if no previous offset is found for the consumer's group."
        },
        {
          "value": "exception",
          "description": "Throw exception to the consumer."
        }
      ],
      "providers": [{"name": "any"}]
    },
    {
      "name": "spring.kafka.consumer.key-deserializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Deserializer"}
      }]
    },
    {
      "name": "spring.kafka.consumer.value-deserializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Deserializer"}
      }]
    },
    {
      "name": "spring.kafka.producer.key-serializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Serializer"}
      }]
    },
    {
      "name": "spring.kafka.producer.value-serializer",
      "providers": [{
        "name": "handle-as",
        "parameters": {"target": "org.apache.kafka.common.serialization.Serializer"}
      }]
    },
    {
      "name": "spring.profiles.active",
      "providers": [{"name": "spring-profile-name"}]
    },
    {
      "name": "spring.profiles.include",
      "providers": [{"name": "spring-profile-name"}]
    }
  ]
}